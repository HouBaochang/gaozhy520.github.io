<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>高志逺的博客</title>
  
  <subtitle>gaozhy&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.gaozhy.cn/"/>
  <updated>2018-01-19T10:18:45.240Z</updated>
  <id>http://www.gaozhy.cn/</id>
  
  <author>
    <name>高志逺</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MongoDB的分片集 (六)</title>
    <link href="http://www.gaozhy.cn/2018/01/19/MongoDB%E7%9A%84%E5%88%86%E7%89%87%E9%9B%86/"/>
    <id>http://www.gaozhy.cn/2018/01/19/MongoDB的分片集/</id>
    <published>2018-01-19T08:28:19.000Z</published>
    <updated>2018-01-19T10:18:45.240Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/19/MongoDB的分片集/logo.jpg" title="分片集"><blockquote><p>Sharding（分片） is a method for distributing data across multiple machines. MongoDB uses sharding to support deployments with very large data sets and high throughput operations.  </p><h5 id="个人理解："><a href="#个人理解：" class="headerlink" title="个人理解："></a>个人理解：</h5><p>分片是一种支持海量数据存储并进行高吞吐量操作的方式<br>在大数据集和高吞吐量操作的情况下，对单一的服务器硬件要求较高（一般要求算力优异的CPU提供运算能力，RAM或者DISK也要足够大）。传统的方式就是对服务器硬件进行升级，而这样的做的成本往往很高（<strong>垂直扩展</strong>）。而MongoDB提供的分片，其实上就是使用多数的廉价服务器构建成集群，提供海量的数据存储以及并行计算的能力（<strong>水平扩展</strong>）</p></blockquote><a id="more"></a><h3 id="一、-原理图"><a href="#一、-原理图" class="headerlink" title="一、 原理图"></a>一、 原理图</h3><p><img src="sharding.png" alt="原理图"></p><h3 id="二、-分片集群的组件"><a href="#二、-分片集群的组件" class="headerlink" title="二、 分片集群的组件"></a>二、 分片集群的组件</h3><ul><li><strong>shard server</strong>：用于存储实际的数据块，实际生产环境中一个shard server角色可由几台机器组个一个replica set承担，防止主机单点故障</li><li><strong>config server</strong>：顾名思义为配置服务器，存储所有数据库元信息（路由、分片）的配置。</li><li><strong>mongos server</strong>：数据库集群请求的入口，所有的请求都通过mongos进行协调，不需要在应用程序添加一个路由选择器，mongos自己就是一个请求分发中心，它负责把对应的数据请求请求转发到对应的shard服务器上。在生产环境通常有多mongos作为请求的入口，防止其中一个挂掉所有的mongodb请求都没有办法操作。</li></ul><h3 id="三、-搭建步骤"><a href="#三、-搭建步骤" class="headerlink" title="三、 搭建步骤"></a>三、 搭建步骤</h3><blockquote><p>注意：3.4版本后，config server需要搭建集群</p></blockquote><h6 id="1-准备5台服务器"><a href="#1-准备5台服务器" class="headerlink" title="1. 准备5台服务器"></a>1. 准备5台服务器</h6>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shard1 192.168.128.156:28001</span><br><span class="line">shard2 192.168.128.156:28002</span><br><span class="line">shard3 192.168.128.156:28003</span><br><span class="line">config1 192.168.128.156:28004</span><br><span class="line">config2 192.168.128.156:28005</span><br><span class="line">config3 192.168.128.156:28006</span><br><span class="line">mongos 192.168.128.156:28007</span><br></pre></td></tr></table></figure><h6 id="2-启动shard服务器"><a href="#2-启动shard服务器" class="headerlink" title="2. 启动shard服务器"></a>2. 启动shard服务器</h6>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/&#123;shard1,shard2,shard3&#125;</span><br><span class="line">mkdir -p /data/&#123;config1,config2,config3&#125;</span><br><span class="line">mkdir -p /data/mongos</span><br><span class="line">mongodb/bin/mongod --port 28001 --dbpath=/data/shard1/ --bind_ip 192.168.128.156 --shardsvr</span><br><span class="line">mongodb/bin/mongod --port 28002 --dbpath=/data/shard2/ --bind_ip 192.168.128.156 --shardsvr</span><br><span class="line">mongodb/bin/mongod --port 28003 --dbpath=/data/shard3/ --bind_ip 192.168.128.156 --shardsvr</span><br></pre></td></tr></table></figure><h6 id="3-配置启动config服务器"><a href="#3-配置启动config服务器" class="headerlink" title="3. 配置启动config服务器"></a>3. 配置启动config服务器</h6>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">mongodb/bin/mongod --port 28004 --dbpath=/data/config1/ --bind_ip 192.168.128.156  --configsvr --replSet rs</span><br><span class="line">mongodb/bin/mongod --port 28005 --dbpath=/data/config2/ --bind_ip 192.168.128.156  --configsvr --replSet rs</span><br><span class="line">mongodb/bin/mongod --port 28006 --dbpath=/data/config3/ --bind_ip 192.168.128.156  --configsvr --replSet rs</span><br><span class="line"></span><br><span class="line"># 配置副本集</span><br><span class="line">rs.initiate( &#123;</span><br><span class="line"> _id : "rs",</span><br><span class="line"> members: [</span><br><span class="line">    &#123; _id: 0, host: "192.168.128.156:28004" &#125;,</span><br><span class="line">    &#123; _id: 1, host: "192.168.128.156:28005" &#125;,</span><br><span class="line">    &#123; _id: 2, host: "192.168.128.156:28006" &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"># 查看配置服务器副本集状态</span><br><span class="line">rs:SECONDARY&gt; rs.status();</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"set"</span> : <span class="string">"rs"</span>,</span><br><span class="line"><span class="attr">"date"</span> : ISODate(<span class="string">"2018-01-19T01:42:20.535Z"</span>),</span><br><span class="line"><span class="attr">"myState"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"term"</span> : NumberLong(<span class="number">1</span>),</span><br><span class="line"><span class="attr">"configsvr"</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"heartbeatIntervalMillis"</span> : NumberLong(<span class="number">2000</span>),</span><br><span class="line"><span class="attr">"optimes"</span> : &#123;</span><br><span class="line"><span class="attr">"lastCommittedOpTime"</span> : &#123;</span><br><span class="line">"ts" : Timestamp(1516326131, 1),</span><br><span class="line">"t" : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">"readConcernMajorityOpTime" : &#123;</span><br><span class="line">"ts" : Timestamp(1516326131, 1),</span><br><span class="line">"t" : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">"appliedOpTime" : &#123;</span><br><span class="line">"ts" : Timestamp(1516326131, 1),</span><br><span class="line">"t" : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">"durableOpTime" : &#123;</span><br><span class="line">"ts" : Timestamp(1516326131, 1),</span><br><span class="line">"t" : NumberLong(1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">"members" : [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"_id"</span> : <span class="number">0</span>,</span><br><span class="line"><span class="attr">"name"</span> : <span class="string">"192.168.128.156:28004"</span>,</span><br><span class="line"><span class="attr">"health"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"state"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"stateStr"</span> : <span class="string">"PRIMARY"</span>,</span><br><span class="line"><span class="attr">"uptime"</span> : <span class="number">175</span>,</span><br><span class="line"><span class="attr">"optime"</span> : &#123;</span><br><span class="line">"ts" : Timestamp(1516326131, 1),</span><br><span class="line">"t" : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">"optimeDate" : ISODate("2018-01-19T01:42:11Z"),</span><br><span class="line">"electionTime" : Timestamp(1516326018, 1),</span><br><span class="line">"electionDate" : ISODate("2018-01-19T01:40:18Z"),</span><br><span class="line">"configVersion" : 1,</span><br><span class="line">"self" : true</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"_id"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"name"</span> : <span class="string">"192.168.128.156:28005"</span>,</span><br><span class="line"><span class="attr">"health"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"state"</span> : <span class="number">2</span>,</span><br><span class="line"><span class="attr">"stateStr"</span> : <span class="string">"SECONDARY"</span>,</span><br><span class="line"><span class="attr">"uptime"</span> : <span class="number">133</span>,</span><br><span class="line"><span class="attr">"optime"</span> : &#123;</span><br><span class="line">"ts" : Timestamp(1516326131, 1),</span><br><span class="line">"t" : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">"optimeDurable" : &#123;</span><br><span class="line">"ts" : Timestamp(1516326131, 1),</span><br><span class="line">"t" : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">"optimeDate" : ISODate("2018-01-19T01:42:11Z"),</span><br><span class="line">"optimeDurableDate" : ISODate("2018-01-19T01:42:11Z"),</span><br><span class="line">"lastHeartbeat" : ISODate("2018-01-19T01:42:18.777Z"),</span><br><span class="line">"lastHeartbeatRecv" : ISODate("2018-01-19T01:42:19.933Z"),</span><br><span class="line">"pingMs" : NumberLong(0),</span><br><span class="line">"syncingTo" : "192.168.128.156:28004",</span><br><span class="line">"configVersion" : 1</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"_id"</span> : <span class="number">2</span>,</span><br><span class="line"><span class="attr">"name"</span> : <span class="string">"192.168.128.156:28006"</span>,</span><br><span class="line"><span class="attr">"health"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"state"</span> : <span class="number">2</span>,</span><br><span class="line"><span class="attr">"stateStr"</span> : <span class="string">"SECONDARY"</span>,</span><br><span class="line"><span class="attr">"uptime"</span> : <span class="number">133</span>,</span><br><span class="line"><span class="attr">"optime"</span> : &#123;</span><br><span class="line">"ts" : Timestamp(1516326131, 1),</span><br><span class="line">"t" : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">"optimeDurable" : &#123;</span><br><span class="line">"ts" : Timestamp(1516326131, 1),</span><br><span class="line">"t" : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">"optimeDate" : ISODate("2018-01-19T01:42:11Z"),</span><br><span class="line">"optimeDurableDate" : ISODate("2018-01-19T01:42:11Z"),</span><br><span class="line">"lastHeartbeat" : ISODate("2018-01-19T01:42:18.778Z"),</span><br><span class="line">"lastHeartbeatRecv" : ISODate("2018-01-19T01:42:20.030Z"),</span><br><span class="line">"pingMs" : NumberLong(0),</span><br><span class="line">"syncingTo" : "192.168.128.156:28004",</span><br><span class="line">"configVersion" : 1</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">"ok" : 1,</span><br><span class="line">"operationTime" : Timestamp(1516326131, 1),</span><br><span class="line">"$gleStats" : &#123;</span><br><span class="line">"lastOpTime" : Timestamp(1516326007, 1),</span><br><span class="line">"electionId" : ObjectId("7fffffff0000000000000001")</span><br><span class="line">&#125;,</span><br><span class="line">"$clusterTime" : &#123;</span><br><span class="line">"clusterTime" : Timestamp(1516326131, 1),</span><br><span class="line">"signature" : &#123;</span><br><span class="line">"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),</span><br><span class="line">"keyId" : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="sharding1.png" alt="sharding1"> </p><h6 id="4-启动mongos服务器"><a href="#4-启动mongos服务器" class="headerlink" title="4. 启动mongos服务器"></a>4. 启动mongos服务器</h6>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb/bin/mongos --port 28007 --bind_ip 192.168.128.156 --configdb rs/192.168.128.156:28004,192.168.128.156:28005,192.168.128.156:28006</span><br></pre></td></tr></table></figure><h6 id="5-初始化分片集群"><a href="#5-初始化分片集群" class="headerlink" title="5. 初始化分片集群"></a>5. 初始化分片集群</h6>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 使用客户端命令连接分片集群</span><br><span class="line">mongodb/bin/mongo 192.168.128.156:28007</span><br><span class="line"></span><br><span class="line"># 设置chunk大小</span><br><span class="line">use config</span><br><span class="line">db.settings.save( &#123; _id:&quot;chunksize&quot;, value: 1 &#125; )</span><br><span class="line"></span><br><span class="line"># 添加分片节点</span><br><span class="line">db.runCommand(&#123;addShard:&quot;192.168.128.156:28001&quot;&#125;);</span><br><span class="line">db.runCommand(&#123;addShard:&quot;192.168.128.156:28002&quot;&#125;);</span><br><span class="line">db.runCommand(&#123;addShard:&quot;192.168.128.156:28003&quot;&#125;);</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mongodb/bin/mongo 192.168.128.156:28007</span><br><span class="line"></span><br><span class="line"># MongoDB分片是针对集合的，要想使集合支持分片，首先需要使其数据库支持分片，为数据库testdb启动分片</span><br><span class="line">sh.enableSharding(&quot;testdb&quot;);</span><br><span class="line"></span><br><span class="line"># 为分片字段建立索引，同时为集合指定片键</span><br><span class="line">use testdb</span><br><span class="line">db.users.ensureIndex(&#123;name:1&#125;);</span><br><span class="line"></span><br><span class="line"># 启用集合分片，为其指定片键</span><br><span class="line">sh.shardCollection(&quot;testdb.users&quot;,&#123;name:1&#125;);</span><br></pre></td></tr></table></figure><p>  <img src="sharding2.png" alt="Sharding2"> </p><p>  <img src="sharding3.png" alt="分片状态"> </p><h6 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h6>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接mongos，插入50W数据测试下分片</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">500000</span>;i++)&#123;</span><br><span class="line">db.users.insert(&#123;<span class="string">"name"</span>:<span class="string">"zs"</span>+i,<span class="string">"age"</span>:i&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">mongos&gt; sh.status();</span><br><span class="line">--- Sharding Status --- </span><br><span class="line">  sharding version: &#123;</span><br><span class="line">  "_id" : 1,</span><br><span class="line">  "minCompatibleVersion" : 5,</span><br><span class="line">  "currentVersion" : 6,</span><br><span class="line">  "clusterId" : ObjectId("5a6163a5130c3601a3a20db4")</span><br><span class="line">  &#125;</span><br><span class="line">  shards:</span><br><span class="line">        &#123;  <span class="attr">"_id"</span> : <span class="string">"shard0000"</span>,  <span class="attr">"host"</span> : <span class="string">"192.168.128.156:28001"</span>,  <span class="attr">"state"</span> : <span class="number">1</span> &#125;</span><br><span class="line">        &#123;  <span class="attr">"_id"</span> : <span class="string">"shard0001"</span>,  <span class="attr">"host"</span> : <span class="string">"192.168.128.156:28002"</span>,  <span class="attr">"state"</span> : <span class="number">1</span> &#125;</span><br><span class="line">        &#123;  <span class="attr">"_id"</span> : <span class="string">"shard0002"</span>,  <span class="attr">"host"</span> : <span class="string">"192.168.128.156:28003"</span>,  <span class="attr">"state"</span> : <span class="number">1</span> &#125;</span><br><span class="line">  active mongoses:</span><br><span class="line">        "3.6.2" : 1</span><br><span class="line">  autosplit:</span><br><span class="line">        Currently enabled: yes</span><br><span class="line">  balancer:</span><br><span class="line">        Currently enabled:  yes</span><br><span class="line">        Currently running:  yes</span><br><span class="line">        Collections with active migrations: </span><br><span class="line">                testdb.users started at Fri Jan 19 2018 11:25:25 GMT+0800 (CST)</span><br><span class="line">        Failed balancer rounds in last 5 attempts:  0</span><br><span class="line">        Migration Results for the last 24 hours: </span><br><span class="line">                5 : Success</span><br><span class="line">  databases:</span><br><span class="line">        &#123;  <span class="attr">"_id"</span> : <span class="string">"config"</span>,  <span class="attr">"primary"</span> : <span class="string">"config"</span>,  <span class="attr">"partitioned"</span> : <span class="literal">true</span> &#125;</span><br><span class="line">                config.system.sessions</span><br><span class="line">                        shard key: &#123; "_id" : 1 &#125;</span><br><span class="line">                        unique: false</span><br><span class="line">                        balancing: true</span><br><span class="line">                        chunks:</span><br><span class="line">                                shard00001</span><br><span class="line">                        &#123; "_id" : &#123; "$minKey" : 1 &#125; &#125; --&gt;&gt; &#123; "_id" : &#123; "$maxKey" : 1 &#125; &#125; on : shard0000 Timestamp(1, 0) </span><br><span class="line">        &#123;  <span class="attr">"_id"</span> : <span class="string">"testdb"</span>,  <span class="attr">"primary"</span> : <span class="string">"shard0000"</span>,  <span class="attr">"partitioned"</span> : <span class="literal">true</span> &#125;</span><br><span class="line">                testdb.users</span><br><span class="line">                        shard key: &#123; "name" : 1 &#125;</span><br><span class="line">                        unique: false</span><br><span class="line">                        balancing: true</span><br><span class="line">                        chunks:</span><br><span class="line">                                shard00003</span><br><span class="line">                                shard00013</span><br><span class="line">                                shard00025</span><br><span class="line">                        &#123; "name" : &#123; "$minKey" : 1 &#125; &#125; --&gt;&gt; &#123; "name" : "zs1" &#125; on : shard0002 Timestamp(5, 0) </span><br><span class="line">                        &#123; "name" : "zs1" &#125; --&gt;&gt; &#123; "name" : "zs108900" &#125; on : shard0002 Timestamp(6, 2) </span><br><span class="line">                        &#123; "name" : "zs108900" &#125; --&gt;&gt; &#123; "name" : "zs17318" &#125; on : shard0002 Timestamp(6, 3) </span><br><span class="line">                        &#123; "name" : "zs17318" &#125; --&gt;&gt; &#123; "name" : "zs19072" &#125; on : shard0002 Timestamp(6, 4) </span><br><span class="line">                        &#123; "name" : "zs19072" &#125; --&gt;&gt; &#123; "name" : "zs28146" &#125; on : shard0001 Timestamp(5, 1) </span><br><span class="line">                        &#123; "name" : "zs28146" &#125; --&gt;&gt; &#123; "name" : "zs42" &#125; on : shard0001 Timestamp(4, 3) </span><br><span class="line">                        &#123; "name" : "zs42" &#125; --&gt;&gt; &#123; "name" : "zs5163" &#125; on : shard0001 Timestamp(4, 4) </span><br><span class="line">                        &#123; "name" : "zs5163" &#125; --&gt;&gt; &#123; "name" : "zs60703" &#125; on : shard0002 Timestamp(6, 0) </span><br><span class="line">                        &#123; "name" : "zs60703" &#125; --&gt;&gt; &#123; "name" : "zs6978" &#125; on : shard0000 Timestamp(6, 1) </span><br><span class="line">                        &#123; "name" : "zs6978" &#125; --&gt;&gt; &#123; "name" : "zs8724" &#125; on : shard0000 Timestamp(5, 4) </span><br><span class="line">                        &#123; "name" : "zs8724" &#125; --&gt;&gt; &#123; "name" : &#123; "$maxKey" : 1 &#125; &#125; on : shard0000 Timestamp(1, 3)</span><br></pre></td></tr></table></figure><p>  <code>分片结果</code><br>  <img src="sharding4.png" alt="sharding4"> </p><p>  <img src="sharding5.png" alt="sharding5"> </p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/19/MongoDB的分片集/logo.jpg&quot; title=&quot;分片集&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;Sharding（分片） is a method for distributing data across multiple machines. MongoDB uses sharding to support deployments with very large data sets and high throughput operations.  &lt;/p&gt;
&lt;h5 id=&quot;个人理解：&quot;&gt;&lt;a href=&quot;#个人理解：&quot; class=&quot;headerlink&quot; title=&quot;个人理解：&quot;&gt;&lt;/a&gt;个人理解：&lt;/h5&gt;&lt;p&gt;分片是一种支持海量数据存储并进行高吞吐量操作的方式&lt;br&gt;在大数据集和高吞吐量操作的情况下，对单一的服务器硬件要求较高（一般要求算力优异的CPU提供运算能力，RAM或者DISK也要足够大）。传统的方式就是对服务器硬件进行升级，而这样的做的成本往往很高（&lt;strong&gt;垂直扩展&lt;/strong&gt;）。而MongoDB提供的分片，其实上就是使用多数的廉价服务器构建成集群，提供海量的数据存储以及并行计算的能力（&lt;strong&gt;水平扩展&lt;/strong&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://www.gaozhy.cn/categories/Big-Data/"/>
    
    
      <category term="NOSQL" scheme="http://www.gaozhy.cn/tags/NOSQL/"/>
    
      <category term="数据库" scheme="http://www.gaozhy.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基于副本集完成读写分离 (五)</title>
    <link href="http://www.gaozhy.cn/2018/01/18/%E5%9F%BA%E4%BA%8E%E5%89%AF%E6%9C%AC%E9%9B%86%E7%9A%84%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    <id>http://www.gaozhy.cn/2018/01/18/基于副本集的读写分离/</id>
    <published>2018-01-18T10:27:49.000Z</published>
    <updated>2018-01-19T09:00:30.777Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/18/基于副本集的读写分离/logo.jpg" title="logo"><blockquote><p>好了，我们在上一个章节<a href="http://www.gaozhy.cn/2018/01/17/%E6%90%AD%E5%BB%BAMongoDB%E5%89%AF%E6%9C%AC%E9%9B%86/">（搭建MongoDB副本集 (四) ）</a>中，已经介绍过利用Mongo副本集可以搭建一个高可用的集群环境。但是在默情况下，读写操作都在<code>Primary</code>上进行，在高并发的环境下，<code>Primary</code>的负载较大。那如何解决这个问题呢？，我们可以利用读写分离，也就是<code>Primary</code>负责写操作，<code>Secondary</code>负责读操作，分摊<code>Primary</code>的压力。</p></blockquote><a id="more"></a><p><img src="rws0.png" alt="读写分离"></p><h3 id="一、MongoDB-drivers-support-five-read-preference-modes"><a href="#一、MongoDB-drivers-support-five-read-preference-modes" class="headerlink" title="一、MongoDB drivers support five read preference modes."></a>一、MongoDB drivers support five read preference modes.</h3><table><thead><tr><th>Read Preference Mode</th><th>Description</th><th>中文解释</th></tr></thead><tbody><tr><td><code>primary</code></td><td>Default mode. All operations read from the current replica set primary.</td><td>默认，从主节点读取数据</td></tr><tr><td><code>primaryPreferred</code></td><td>In most situations, operations read from the primary but if it is unavailable, operations read from secondary</td><td>在主节点不可用时，从副节点读取数据</td></tr><tr><td><code>secondary</code></td><td>All operations read from the secondary members of the replica set.</td><td>所有的读操作，从副节点读取数据</td></tr><tr><td><code>secondaryPreferred</code></td><td>In most situations, operations read from secondary members but if no secondary members are available, operations read from the primary.</td><td>在副节点不可用时，从主节点读取数据</td></tr><tr><td><code>nearest</code></td><td>Operations read from member of the replica set with the least network latency, irrespective of the member’s type.</td><td>从网络延迟最小的节点获取数据</td></tr></tbody></table><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 分别连接两个Sencondary节点服务器，设置为可读状态</span><br><span class="line">db.getMongo().setSlaveOk();</span><br></pre></td></tr></table></figure><h3 id="三、代码如下"><a href="#三、代码如下" class="headerlink" title="三、代码如下"></a>三、代码如下</h3><blockquote><p>注意：在这里我们使用Spring Data提供的MongoTemplate操作<code>ReplSet</code></p></blockquote><h5 id="1-applicationContext-xml"><a href="#1-applicationContext-xml" class="headerlink" title="1. applicationContext.xml"></a>1. applicationContext.xml</h5>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---</span></span><br><span class="line"><span class="comment">  192.168.128.156:28001 primary</span></span><br><span class="line"><span class="comment">  192.168.128.156:28000 secondary</span></span><br><span class="line"><span class="comment">  192.168.128.156:28002 secondary</span></span><br><span class="line"><span class="comment">  read-preference="secondary_preferred" 优先从副节点获取数据</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mongo:mongo-client</span> <span class="attr">id</span>=<span class="string">"mongoClient"</span> <span class="attr">replica-set</span>=<span class="string">"192.168.128.156:28000,192.168.128.156:28001,192.168.128.156:28002"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mongo:client-options</span> <span class="attr">connections-per-host</span>=<span class="string">"8"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">threads-allowed-to-block-for-connection-multiplier</span>=<span class="string">"4"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">connect-timeout</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">max-wait-time</span>=<span class="string">"1500"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">socket-keep-alive</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">socket-timeout</span>=<span class="string">"1500"</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">read-preference</span>=<span class="string">"secondary_preferred"</span></span></span><br><span class="line"><span class="tag">                                /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mongo:mongo-client</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mongo:db-factory</span> <span class="attr">dbname</span>=<span class="string">"database"</span> <span class="attr">mongo-ref</span>=<span class="string">"mongoClient"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mongoTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.mongodb.core.MongoTemplate"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"mongoDbFactory"</span> <span class="attr">ref</span>=<span class="string">"mongoDbFactory"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-Person实体"><a href="#2-Person实体" class="headerlink" title="2. Person实体"></a>2. Person实体</h5>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"p"</span>) <span class="comment">// Mongo中集合名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span>  <span class="comment">// id属性 为文档的主键</span></span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PersistenceConstructor</span>  <span class="comment">// 从mongo中恢复数据到实体时，使用的构造方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer id, String name, Integer age)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="3-测试数据插入"><a href="#3-测试数据插入" class="headerlink" title="3.测试数据插入"></a>3.测试数据插入</h5>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试读写分离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"zs"</span>,<span class="number">18</span>);</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">"ls"</span>,<span class="number">18</span>);</span><br><span class="line">        Person person3 = <span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">"ww"</span>,<span class="number">18</span>);</span><br><span class="line">        Person person4 = <span class="keyword">new</span> Person(<span class="number">4</span>,<span class="string">"zl"</span>,<span class="number">18</span>);</span><br><span class="line">        Person person5 = <span class="keyword">new</span> Person(<span class="number">5</span>,<span class="string">"tq"</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; persons = Arrays.asList(person1, person2, person3, person4, person5);</span><br><span class="line"></span><br><span class="line">        mongoTemplate.insertAll(persons);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="rws1.png" alt="rws1"> </p><blockquote><p>从日志中可以看到，在插入数据的时候，连接的是192.168.128.156:28001的主节点</p></blockquote><h5 id="4-测试数据访问"><a href="#4-测试数据访问" class="headerlink" title="4. 测试数据访问"></a>4. 测试数据访问</h5>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试读写分离</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Person&gt; peoples = mongoTemplate.findAll(Person.class);</span><br><span class="line">        System.out.println(<span class="string">"查到的文档个数为："</span>+peoples.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="rws2.png" alt="rws2"> </p><blockquote><p>仔细查看日志，在数据查询时，连接的是192.168.128.156:28000的副节点。</p></blockquote><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><blockquote><h5 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE:"></a>NOTE:</h5><ol><li>使用非主节点读取数据可能因为复制延迟读取到旧数据，这里一定要注意噢~~~</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/18/基于副本集的读写分离/logo.jpg&quot; title=&quot;logo&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;好了，我们在上一个章节&lt;a href=&quot;http://www.gaozhy.cn/2018/01/17/%E6%90%AD%E5%BB%BAMongoDB%E5%89%AF%E6%9C%AC%E9%9B%86/&quot;&gt;（搭建MongoDB副本集 (四) ）&lt;/a&gt;中，已经介绍过利用Mongo副本集可以搭建一个高可用的集群环境。但是在默情况下，读写操作都在&lt;code&gt;Primary&lt;/code&gt;上进行，在高并发的环境下，&lt;code&gt;Primary&lt;/code&gt;的负载较大。那如何解决这个问题呢？，我们可以利用读写分离，也就是&lt;code&gt;Primary&lt;/code&gt;负责写操作，&lt;code&gt;Secondary&lt;/code&gt;负责读操作，分摊&lt;code&gt;Primary&lt;/code&gt;的压力。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://www.gaozhy.cn/categories/Big-Data/"/>
    
    
      <category term="NOSQL" scheme="http://www.gaozhy.cn/tags/NOSQL/"/>
    
      <category term="数据库" scheme="http://www.gaozhy.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>搭建MongoDB副本集 (四)</title>
    <link href="http://www.gaozhy.cn/2018/01/17/%E6%90%AD%E5%BB%BAMongoDB%E5%89%AF%E6%9C%AC%E9%9B%86/"/>
    <id>http://www.gaozhy.cn/2018/01/17/搭建MongoDB副本集/</id>
    <published>2018-01-17T09:30:13.000Z</published>
    <updated>2018-01-19T09:00:21.667Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/17/搭建MongoDB副本集/logo.jpg" title="logo"><blockquote><ul><li>原文：A replica set in MongoDB is a group of mongod processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.</li><li>译文：副本集是一组mongod进程，它维护了同样的数据集。副本集提供了信息冗余和高可用，是所有生产的基础</li></ul><footer><strong>Mongo官网——</strong><cite><a href="https://docs.mongodb.com/manual/replication/" target="_blank" rel="noopener">Replication</a></cite></footer></blockquote><a id="more"></a><p><img src="replset0.png" alt="副本集"></p><h4 id="一、-节点"><a href="#一、-节点" class="headerlink" title="一、 节点"></a>一、 节点</h4><h5 id="1-Primary-Node-主节点，一个副本集只能有一个主节点，主要作用接受客户端所有写操作（默认情况下，也可以读取数据），并记录主节点操作日志，副节点复制主节点日志，用其同步数据。"><a href="#1-Primary-Node-主节点，一个副本集只能有一个主节点，主要作用接受客户端所有写操作（默认情况下，也可以读取数据），并记录主节点操作日志，副节点复制主节点日志，用其同步数据。" class="headerlink" title="1. Primary Node 主节点，一个副本集只能有一个主节点，主要作用接受客户端所有写操作（默认情况下，也可以读取数据），并记录主节点操作日志，副节点复制主节点日志，用其同步数据。"></a>1. <code>Primary Node</code> 主节点，一个副本集只能有一个主节点，主要作用接受客户端所有写操作（默认情况下，也可以读取数据），并记录主节点操作日志，副节点复制主节点日志，用其同步数据。</h5><p><img src="replset1.png" alt="replset1">  </p><h5 id="2-Secondary-Node-副节点，复制主节点的操作，并同步其数据，实际上副节点是主节点数据的备份。如果主节点挂掉的话，剩余的副节点会触发选举算法，将其中的一个副节点，选举为主节点。"><a href="#2-Secondary-Node-副节点，复制主节点的操作，并同步其数据，实际上副节点是主节点数据的备份。如果主节点挂掉的话，剩余的副节点会触发选举算法，将其中的一个副节点，选举为主节点。" class="headerlink" title="2. Secondary Node 副节点，复制主节点的操作，并同步其数据，实际上副节点是主节点数据的备份。如果主节点挂掉的话，剩余的副节点会触发选举算法，将其中的一个副节点，选举为主节点。"></a>2. <code>Secondary Node</code> 副节点，复制主节点的操作，并同步其数据，实际上副节点是主节点数据的备份。如果主节点挂掉的话，剩余的副节点会触发选举算法，将其中的一个副节点，选举为主节点。</h5><p><img src="replset2.png" alt="replset2"> </p><h4 id="二-搭建步骤"><a href="#二-搭建步骤" class="headerlink" title="二. 搭建步骤"></a>二. 搭建步骤</h4><h5 id="1-准备至少三台服务器（注意：在这里我们在同一台虚拟机上，通过端口号区分不同的Mongo-Server）"><a href="#1-准备至少三台服务器（注意：在这里我们在同一台虚拟机上，通过端口号区分不同的Mongo-Server）" class="headerlink" title="1. 准备至少三台服务器（注意：在这里我们在同一台虚拟机上，通过端口号区分不同的Mongo Server）"></a>1. 准备至少三台服务器（注意：在这里我们在同一台虚拟机上，通过端口号区分不同的Mongo Server）</h5><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Node1: 192.168.128.156 28000</span><br><span class="line">Node2: 192.168.128.156 28001</span><br><span class="line">Node3: 192.168.128.156 28002</span><br></pre></td></tr></table></figure></code></pre><h5 id="2-准备数据存放目录"><a href="#2-准备数据存放目录" class="headerlink" title="2. 准备数据存放目录"></a>2. 准备数据存放目录</h5>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/node1</span><br><span class="line">mkdir -p /data/node2</span><br><span class="line">mkdir -p /data/node3</span><br></pre></td></tr></table></figure><h5 id="3-分别启动三台服务器"><a href="#3-分别启动三台服务器" class="headerlink" title="3. 分别启动三台服务器"></a>3. 分别启动三台服务器</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 启动主服务器</span><br><span class="line">mongodb/bin/mongod --port 28000 --dbpath=/data/node1/ --bind_ip 192.168.128.156 --replSet rs</span><br><span class="line"></span><br><span class="line"># 分别启动两个副服务器</span><br><span class="line">mongodb/bin/mongod --port 28001 --dbpath=/data/node2/ --bind_ip 192.168.128.156 --replSet rs</span><br><span class="line">mongodb/bin/mongod --port 28002 --dbpath=/data/node3/ --bind_ip 192.168.128.156 --replSet rs</span><br></pre></td></tr></table></figure><p>  <img src="replset3.png" alt="replset3"> </p><h5 id="4-初始化副本集（使用客户端连接任意Mongo-Server）"><a href="#4-初始化副本集（使用客户端连接任意Mongo-Server）" class="headerlink" title="4. 初始化副本集（使用客户端连接任意Mongo Server）"></a>4. 初始化副本集（使用客户端连接任意Mongo Server）</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 连接Mongo Server</span><br><span class="line">/root/mongodb/bin/mongo 192.168.128.156:28000</span><br><span class="line"></span><br><span class="line"># 初始化副本集（注意：_id的名字应该和启动参数 `--replSet` value一致）</span><br><span class="line">rs.initiate( &#123;</span><br><span class="line">   _id : &quot;rs&quot;,</span><br><span class="line">   members: [</span><br><span class="line">      &#123; _id: 0, host: &quot;192.168.128.156:28000&quot; &#125;,</span><br><span class="line">      &#123; _id: 1, host: &quot;192.168.128.156:28001&quot; &#125;,</span><br><span class="line">      &#123; _id: 2, host: &quot;192.168.128.156:28002&quot; &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  <img src="replset4.png" alt="replset4"> </p><h5 id="5-查看副本集状态"><a href="#5-查看副本集状态" class="headerlink" title="5. 查看副本集状态"></a>5. 查看副本集状态</h5><p>  <code>rs.status();</code>  </p><p>  <img src="replset5.png" alt="replset5"> </p><h5 id="6-测试副本集数据同步"><a href="#6-测试副本集数据同步" class="headerlink" title="6. 测试副本集数据同步"></a>6. 测试副本集数据同步</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 亲们，我们先往主节点插入一条数据</span><br></pre></td></tr></table></figure><p>  <img src="replset6.png" alt="replset6"> </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 好了，我们再连接副节点，执行查看命令</span><br><span class="line">/root/mongodb/bin/mongo 192.168.128.156:28001</span><br></pre></td></tr></table></figure><p>  <img src="replset7.png" alt="replset7"> </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 咦，为什么出现错误了呢？ </span><br><span class="line"># 原因是因为副本集中默认使用主节点读写数据，副节点只做数据备份，不参与读操作。</span><br><span class="line"># 哎呦！原来如此</span><br><span class="line"># 那如何解决这个问题呢？</span><br><span class="line"># 好了不卖关子了</span><br><span class="line"># 在客户端执行命令 db.getMongo().setSlaveOk();</span><br><span class="line"># 再试试看，是不是OK了！看到同步过来的数据没？ 啦啦啦~~</span><br></pre></td></tr></table></figure><p>  <img src="replset8.png" alt="replset8"> </p><h5 id="7-测试集群容错"><a href="#7-测试集群容错" class="headerlink" title="7. 测试集群容错"></a>7. 测试集群容错</h5><p>  <img src="replset2.png" alt="replset2"> </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 副本集其余的小伙伴，要选举新的Leader啦，原谅我再次引用这张图</span><br><span class="line"># 说干就干</span><br><span class="line"># 关闭端口28000的服务</span><br><span class="line"># 结果如图，是不是很神奇？</span><br></pre></td></tr></table></figure><p>  <img src="replset10.png" alt="replset10"> </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 执行命令rs.status()</span><br><span class="line"># 发现关闭28000主节点端口后，28002端口的副节点经过选举之后变成了主节点，而28001端口的副节点变成了28002节点的副节点</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/17/搭建MongoDB副本集/logo.jpg&quot; title=&quot;logo&quot;&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;原文：A replica set in MongoDB is a group of mongod processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments.&lt;/li&gt;
&lt;li&gt;译文：副本集是一组mongod进程，它维护了同样的数据集。副本集提供了信息冗余和高可用，是所有生产的基础&lt;/li&gt;
&lt;/ul&gt;
&lt;footer&gt;&lt;strong&gt;Mongo官网——&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://docs.mongodb.com/manual/replication/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Replication&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://www.gaozhy.cn/categories/Big-Data/"/>
    
    
      <category term="NOSQL" scheme="http://www.gaozhy.cn/tags/NOSQL/"/>
    
      <category term="数据库" scheme="http://www.gaozhy.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>使用JAVA客户端操作MongoDB (三)</title>
    <link href="http://www.gaozhy.cn/2018/01/17/%E4%BD%BF%E7%94%A8JAVA%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%93%8D%E4%BD%9CMongoDB/"/>
    <id>http://www.gaozhy.cn/2018/01/17/使用JAVA客户端操作MongoDB/</id>
    <published>2018-01-17T08:41:08.000Z</published>
    <updated>2018-01-17T14:42:10.279Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/17/使用JAVA客户端操作MongoDB/logo.jpg" title="图片"><blockquote><h5 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h5><ol><li>3.6版本的MongoDB，只允许localhost连接，如果您要使用非本地的客户端连接，需要绑定IP才可以，在这里我们关闭mongodb服务端，添加参数 <code>--bind_ip_all</code>，重新启动服务。继续测试~~~</li></ol></blockquote><h4 id="maven坐标"><a href="#maven坐标" class="headerlink" title="maven坐标"></a>maven坐标</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mongodb&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mongodb-driver&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.6.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1-插入"><a href="#1-插入" class="headerlink" title="1. 插入"></a>1. 插入</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      MongoClient mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">"192.168.128.156"</span>, <span class="number">27017</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取指定数据库</span></span><br><span class="line">      MongoDatabase database = mongoClient.getDatabase(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取指定集合</span></span><br><span class="line">      MongoCollection&lt;Document&gt; collection = database.getCollection(<span class="string">"users"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建需要插入的单个文档</span></span><br><span class="line">      Document doc = <span class="keyword">new</span> Document(<span class="string">"name"</span>, <span class="string">"MongoDB"</span>)</span><br><span class="line">              .append(<span class="string">"type"</span>, <span class="string">"database"</span>)</span><br><span class="line">              .append(<span class="string">"count"</span>, <span class="number">1</span>)</span><br><span class="line">              .append(<span class="string">"versions"</span>, Arrays.asList(<span class="string">"v3.2"</span>, <span class="string">"v3.0"</span>, <span class="string">"v2.6"</span>))</span><br><span class="line">              .append(<span class="string">"info"</span>, <span class="keyword">new</span> Document(<span class="string">"x"</span>, <span class="number">203</span>).append(<span class="string">"y"</span>, <span class="number">102</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 测试插入</span></span><br><span class="line">      collection.insertOne(doc);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 测试插入多个文档</span></span><br><span class="line">      ArrayList&lt;Document&gt; documents = <span class="keyword">new</span> ArrayList&lt;Document&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">           documents.add(<span class="keyword">new</span> Document(<span class="string">"i"</span>,i));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      collection.insertMany(documents);</span><br><span class="line">      mongoClient.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  <img src="add.png" alt="add"> </p><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2. 修改"></a>2. 修改</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">     MongoClient mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">"192.168.128.156"</span>, <span class="number">27017</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 获取指定数据库</span></span><br><span class="line">     MongoDatabase database = mongoClient.getDatabase(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 获取指定集合</span></span><br><span class="line">     MongoCollection&lt;Document&gt; collection = database.getCollection(<span class="string">"users"</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// update t_user set i = 110 where i = 10</span></span><br><span class="line">     <span class="comment">//UpdateResult updateResult = collection.updateOne(new Document("i", 10), new Document("$set", new Document("i", 110)));</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// update t_user set i =10 where i &lt; 20</span></span><br><span class="line">     <span class="comment">// lt(key,value)  静态导入  import static com.mongodb.client.model.Filters.lt;</span></span><br><span class="line">     collection.updateMany(lt(<span class="string">"i"</span>,<span class="number">20</span>),<span class="keyword">new</span> Document(<span class="string">"$set"</span>,<span class="keyword">new</span> Document(<span class="string">"i"</span>,<span class="number">10</span>).append(<span class="string">"test"</span>,<span class="string">"test value"</span>)));</span><br><span class="line"></span><br><span class="line">     mongoClient.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  <img src="update4.png" alt="update4"></p><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3. 删除"></a>3. 删除</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">      MongoClient mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">"192.168.128.156"</span>, <span class="number">27017</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取指定数据库</span></span><br><span class="line">      MongoDatabase database = mongoClient.getDatabase(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取指定集合</span></span><br><span class="line">      MongoCollection&lt;Document&gt; collection = database.getCollection(<span class="string">"users"</span>);</span><br><span class="line"></span><br><span class="line">      DeleteResult deleteResult = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//deleteResult =collection.deleteOne(eq("i", 110));</span></span><br><span class="line"></span><br><span class="line">      deleteResult = collection.deleteMany(lt(<span class="string">"i"</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"删除的文档数："</span>+deleteResult.getDeletedCount());</span><br><span class="line"></span><br><span class="line">      mongoClient.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  <img src="delete2.png" alt="delete2"></p><h4 id="4-查询"><a href="#4-查询" class="headerlink" title="4. 查询"></a>4. 查询</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">     MongoClient mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">"192.168.128.156"</span>, <span class="number">27017</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 获取指定数据库</span></span><br><span class="line">     MongoDatabase database = mongoClient.getDatabase(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 获取指定集合</span></span><br><span class="line">     MongoCollection&lt;Document&gt; collection = database.getCollection(<span class="string">"users"</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 查所有</span></span><br><span class="line">     FindIterable&lt;Document&gt; documents = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     documents = collection.find();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 条件查询 select * fromt t_user where i = 20</span></span><br><span class="line">     documents = collection.find(eq(<span class="string">"i"</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">     <span class="comment">// select * from t_user where i &lt;= 20</span></span><br><span class="line">     documents = collection.find(lte(<span class="string">"i"</span>,<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">     <span class="comment">// select * from t_user where i = 30 or i = 40 or i = 50</span></span><br><span class="line">     documents = collection.find(in(<span class="string">"i"</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">     <span class="comment">// SELECT * FROM t_user WHERE i = 50 OR i &lt; 25</span></span><br><span class="line">     documents = collection.find(or(<span class="keyword">new</span> Document(<span class="string">"i"</span>,<span class="number">50</span>),lt(<span class="string">"i"</span>,<span class="number">25</span>)));</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 模糊查询 参数二：模糊条件</span></span><br><span class="line">     documents = collection.find(regex(<span class="string">"test"</span>,<span class="string">"test"</span>));</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 排序 SELECT * FROM t_user WHERE i &gt;= 90 order by i desc</span></span><br><span class="line">     documents = collection.find(gt(<span class="string">"i"</span>,<span class="number">90</span>)).sort(Sorts.descending(<span class="string">"i"</span>));</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 分页查询</span></span><br><span class="line">     documents = collection.find().skip(<span class="number">50</span>).limit(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (Document document : documents) &#123;</span><br><span class="line">         System.out.println(document);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     mongoClient.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/17/使用JAVA客户端操作MongoDB/logo.jpg&quot; title=&quot;图片&quot;&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;NOTE&quot;&gt;&lt;a href=&quot;#NOTE&quot; class=&quot;headerlink&quot; title=&quot;NOTE&quot;&gt;&lt;/a&gt;NOTE&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;3.6版本的MongoDB，只允许localhost连接，如果您要使用非本地的客户端连接，需要绑定IP才可以，在这里我们关闭mongodb服务端，添加参数 &lt;code&gt;--bind_ip_all&lt;/code&gt;，重新启动服务。继续测试~~~&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;maven坐标&quot;&gt;&lt;a href=&quot;#maven坐标&quot; class=&quot;headerlink&quot; title=&quot;maven坐标&quot;&gt;&lt;/a&gt;maven坐标&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.mongodb&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;mongodb-driver&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;3.6.1&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://www.gaozhy.cn/categories/Big-Data/"/>
    
    
      <category term="NOSQL" scheme="http://www.gaozhy.cn/tags/NOSQL/"/>
    
      <category term="数据库" scheme="http://www.gaozhy.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB常用操作命令 (二)</title>
    <link href="http://www.gaozhy.cn/2018/01/16/MongoDB%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-CRUD/"/>
    <id>http://www.gaozhy.cn/2018/01/16/MongoDB常用操作-CRUD/</id>
    <published>2018-01-16T09:39:44.000Z</published>
    <updated>2018-01-17T04:26:56.176Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/16/MongoDB常用操作-CRUD/logo.jpg" title="图片"><h3 id="一、插入操作"><a href="#一、插入操作" class="headerlink" title="一、插入操作"></a>一、插入操作</h3><h5 id="1-单个文档插入"><a href="#1-单个文档插入" class="headerlink" title="1. 单个文档插入"></a>1. 单个文档插入</h5><a id="more"></a><p>  <code>db.COLLECTION_NAME.insert(document)</code><br>  <img src="8.png" alt=""> </p><h5 id="2-批量文档插入"><a href="#2-批量文档插入" class="headerlink" title="2. 批量文档插入"></a>2. 批量文档插入</h5><p>  <code>db.COLLECTION_NAME.insert([document,document1.....])</code><br>  <img src="9.png" alt="">  </p><blockquote><p>注：在高版本mongodb中又新增了 db.collection.insertOne()和db.collection.insertMany() 这两个方法，分别用来插入单个文档和多个文档</p></blockquote><h3 id="二、查询操作"><a href="#二、查询操作" class="headerlink" title="二、查询操作"></a>二、查询操作</h3><h5 id="1-查集合中所有文档"><a href="#1-查集合中所有文档" class="headerlink" title="1. 查集合中所有文档"></a>1. 查集合中所有文档</h5><p>  <code>db.collection.find( {} )</code> 等同于SQL查询中的 <code>SELECT * FROM collection</code><br>  <img src="10.png" alt=""> </p><h5 id="2-指定条件查询-lt-field1-gt-lt-value1-gt"><a href="#2-指定条件查询-lt-field1-gt-lt-value1-gt" class="headerlink" title="2. 指定条件查询 { &lt;field1&gt;: &lt;value1&gt;}"></a>2. 指定条件查询 <code>{ &lt;field1&gt;: &lt;value1&gt;}</code></h5><p>  例: <code>db.users.find({&quot;name&quot;:&quot;zs&quot;});</code> 类似于 <code>select * from t_user where name = &#39;zs&#39;</code></p><blockquote><p>注：在这里我们先学习下最基本的语法，更复杂的查询在后续介绍</p></blockquote><h3 id="三、修改文档"><a href="#三、修改文档" class="headerlink" title="三、修改文档"></a>三、修改文档</h3><h5 id="1-db-collection-update-lt-filter-gt-lt-update-gt"><a href="#1-db-collection-update-lt-filter-gt-lt-update-gt" class="headerlink" title="1. db.collection.update(&lt;filter&gt;, &lt;update&gt;);"></a>1. <code>db.collection.update(&lt;filter&gt;, &lt;update&gt;);</code></h5><p>  <img src="update.png" alt="update"> </p><h5 id="2-db-collection-updateOne-lt-filter-gt-lt-update-operator-gt-lt-field1-gt-lt-value1-gt-只修改符合条件的第一条文档"><a href="#2-db-collection-updateOne-lt-filter-gt-lt-update-operator-gt-lt-field1-gt-lt-value1-gt-只修改符合条件的第一条文档" class="headerlink" title="2. db.collection.updateOne(&lt;filter&gt;, {&lt;update operator&gt;: { &lt;field1&gt;: &lt;value1&gt;, ... }) 只修改符合条件的第一条文档"></a>2. <code>db.collection.updateOne(&lt;filter&gt;, {&lt;update operator&gt;: { &lt;field1&gt;: &lt;value1&gt;, ... })</code> 只修改符合条件的第一条文档</h5><p>  <img src="update1.png" alt="update1"> </p><blockquote><p>注：<code>$set</code> 操作符 使用指定的value替换旧值,如果修改的属性不存在，则创建</p></blockquote><h5 id="3-db-collection-updateMany-lt-filter-gt-lt-update-operator-gt-lt-field1-gt-lt-value1-gt-将符合条件的所有文档都进行修改"><a href="#3-db-collection-updateMany-lt-filter-gt-lt-update-operator-gt-lt-field1-gt-lt-value1-gt-将符合条件的所有文档都进行修改" class="headerlink" title="3. db.collection.updateMany(&lt;filter&gt;, {&lt;update operator&gt;: { &lt;field1&gt;: &lt;value1&gt;, ... })  将符合条件的所有文档都进行修改"></a>3. <code>db.collection.updateMany(&lt;filter&gt;, {&lt;update operator&gt;: { &lt;field1&gt;: &lt;value1&gt;, ... })</code>  将符合条件的所有文档都进行修改</h5><p>  <img src="update2.png" alt="update2"> </p><h5 id="4-db-collection-replaceOne-替换除-id外的所有属性"><a href="#4-db-collection-replaceOne-替换除-id外的所有属性" class="headerlink" title="4. db.collection.replaceOne() 替换除_id外的所有属性"></a>4. <code>db.collection.replaceOne()</code> 替换除_id外的所有属性</h5><p>  <img src="update3.png" alt="update3"> </p><h3 id="四、删除文档"><a href="#四、删除文档" class="headerlink" title="四、删除文档"></a>四、删除文档</h3><h5 id="1-db-collection-deleteOne-lt-field1-gt-lt-value1-gt"><a href="#1-db-collection-deleteOne-lt-field1-gt-lt-value1-gt" class="headerlink" title="1. db.collection.deleteOne({&lt;field1&gt;: &lt;value1&gt;,...})"></a>1. <code>db.collection.deleteOne({&lt;field1&gt;: &lt;value1&gt;,...})</code></h5><p>  <img src="delete.png" alt=""></p><h5 id="2-db-collection-deleteMany-lt-field1-gt-lt-value1-gt"><a href="#2-db-collection-deleteMany-lt-field1-gt-lt-value1-gt" class="headerlink" title="2. db.collection.deleteMany({&lt;field1&gt;: &lt;value1&gt;,...})"></a>2. <code>db.collection.deleteMany({&lt;field1&gt;: &lt;value1&gt;,...})</code></h5><p>  <img src="delete1.png" alt="delete1"></p><h3 id="五、-复杂查询"><a href="#五、-复杂查询" class="headerlink" title="五、 复杂查询"></a>五、 复杂查询</h3><h5 id="1-使用查询操作符指定条件"><a href="#1-使用查询操作符指定条件" class="headerlink" title="1. 使用查询操作符指定条件"></a>1. 使用查询操作符指定条件</h5><p>  语法： <code>{ &lt;field1&gt;: { &lt;operator1&gt;: &lt;value1&gt; }, ... }</code></p><ul><li><strong>$in</strong><br><code>db.collection.find( { status: { $in: [ &quot;A&quot;, &quot;D&quot; ] } } )</code> 等同于 <code>SELECT * FROM collection WHERE status in (&quot;A&quot;, &quot;D&quot;)</code></li><li><strong>$and</strong> | <strong>$lt</strong><br><code>db.collection.find( { status: &quot;A&quot;, qty: { $lt: 30 } } )</code> 等同于 <code>SELECT * FROM collection WHERE status = &quot;A&quot; AND qty &lt; 30</code></li><li><strong>$or</strong><br><code>db.collection.find( { $or: [ { status: &quot;A&quot; }, { qty: { $lt: 30 } } ] } )</code> 等同于 <code>SELECT * FROM collection WHERE status = &quot;A&quot; OR qty &lt; 30</code></li><li><strong>$and</strong> 和 <strong>$or</strong><br><code>db.collection.find( { status: &quot;A&quot;, $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ] } )</code> 等同于 <code>SELECT * FROM collection WHERE status = &quot;A&quot; AND ( qty &lt; 30 OR item LIKE &quot;p%&quot;)</code></li><li><strong>$lt | $gt | $lte | $gte</strong></li></ul><h5 id="2-查询结果排序"><a href="#2-查询结果排序" class="headerlink" title="2. 查询结果排序"></a>2. 查询结果排序</h5><p>  语法： <code>db.collection.find().sort({_id:1})</code> <strong>1 升序 -1 降序</strong></p><h5 id="3-分页查询"><a href="#3-分页查询" class="headerlink" title="3. 分页查询"></a>3. 分页查询</h5><p>  语法： <code>db.collection.find().sort().skip(起始条数).limit(结束条数)</code></p><h5 id="4-总条数"><a href="#4-总条数" class="headerlink" title="4. 总条数"></a>4. 总条数</h5><p>  语法： <code>db.collection.find().count()</code> </p><h5 id="5-模糊查询"><a href="#5-模糊查询" class="headerlink" title="5. 模糊查询"></a>5. 模糊查询</h5><p>  语法： <code>db.collection.find({&quot;name&quot;:/zs/});</code></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/16/MongoDB常用操作-CRUD/logo.jpg&quot; title=&quot;图片&quot;&gt;
&lt;h3 id=&quot;一、插入操作&quot;&gt;&lt;a href=&quot;#一、插入操作&quot; class=&quot;headerlink&quot; title=&quot;一、插入操作&quot;&gt;&lt;/a&gt;一、插入操作&lt;/h3&gt;&lt;h5 id=&quot;1-单个文档插入&quot;&gt;&lt;a href=&quot;#1-单个文档插入&quot; class=&quot;headerlink&quot; title=&quot;1. 单个文档插入&quot;&gt;&lt;/a&gt;1. 单个文档插入&lt;/h5&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://www.gaozhy.cn/categories/Big-Data/"/>
    
    
      <category term="NOSQL" scheme="http://www.gaozhy.cn/tags/NOSQL/"/>
    
      <category term="数据库" scheme="http://www.gaozhy.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB概述 (一)</title>
    <link href="http://www.gaozhy.cn/2018/01/16/MongoDB%E6%A6%82%E8%BF%B0/"/>
    <id>http://www.gaozhy.cn/2018/01/16/MongoDB概述/</id>
    <published>2018-01-16T09:25:13.000Z</published>
    <updated>2018-01-17T03:44:26.464Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/16/MongoDB概述/logo.jpg" title="图片"><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h5 id="MongoDB-是一款免费开源的NOSQL文档型数据库，旨在为WEB应用提供可护展的高性能数据存储解决方案。"><a href="#MongoDB-是一款免费开源的NOSQL文档型数据库，旨在为WEB应用提供可护展的高性能数据存储解决方案。" class="headerlink" title="MongoDB 是一款免费开源的NOSQL文档型数据库，旨在为WEB应用提供可护展的高性能数据存储解决方案。"></a><em><a href="https://www.mongodb.com/what-is-mongodb" target="_blank" rel="noopener">MongoDB</a></em> 是一款免费开源的NOSQL文档型数据库，旨在为WEB应用提供可护展的高性能数据存储解决方案。</h5><blockquote><p><strong>Note:</strong></p><ol><li><em>NOSQL(not only sql)：</em>指的是非关系型数据库,没有固定的存储格式，一般适用于超大规模数据的存储。</li><li><em>NOSQL</em>优点：高可用、可扩展、低成本、数据结构灵活</li><li><em>NOSQL</em>缺点：弱化事务</li></ol></blockquote><a id="more"></a><h3 id="二、-特点"><a href="#二、-特点" class="headerlink" title="二、 特点"></a>二、 特点</h3><ol><li>数据存储格式为 <em>BSON</em>（一种二进制形式的存储格式，类似于 <em>JSON</em>）<br><img src="00.png" alt=""></li><li>丰富的查询语言（CRUD、数据聚合、全文检索、地理位置查询）</li><li>高可用（副本集）</li><li>水平扩展,支持海量数据存储（分片）</li><li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li><li>支持完全索引</li></ol><h3 id="三、-MongoDB中概念解析"><a href="#三、-MongoDB中概念解析" class="headerlink" title="三、 MongoDB中概念解析"></a>三、 MongoDB中概念解析</h3><table><thead><tr><th>SQL术语</th><th>MongoDB术语</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>集合</td></tr><tr><td>row</td><td>document</td><td>文档，一条记录</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>primary key</td><td>primary key</td><td>主键,MongoDB自动将_id字段设置为主键</td></tr><tr><td>foreign key</td><td>无</td><td>无</td></tr></tbody></table><h3 id="四、环境搭建（注：最新版本3-6-只能在64位系统安装）"><a href="#四、环境搭建（注：最新版本3-6-只能在64位系统安装）" class="headerlink" title="四、环境搭建（注：最新版本3.6,只能在64位系统安装）"></a>四、环境搭建（注：最新版本3.6,只能在64位系统安装）</h3><h5 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.6.2.tgz</span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.6.2.tgz</span><br><span class="line">mv mongodb-linux-x86_64-3.6.2 mongodb</span><br></pre></td></tr></table></figure><h5 id="2-启动mongodb服务"><a href="#2-启动mongodb服务" class="headerlink" title="2. 启动mongodb服务"></a>2. 启动mongodb服务</h5><p>  <img src="0.png" alt=""><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动mongo server命令</span><br><span class="line">./mongod --port 27017 --dbpath=/data/db</span><br></pre></td></tr></table></figure></p><p>  # 启动成功，如下图所示：<br>  <img src="1.png" alt=""></p><h3 id="五、MongoDB的客户端基本操作"><a href="#五、MongoDB的客户端基本操作" class="headerlink" title="五、MongoDB的客户端基本操作"></a>五、MongoDB的客户端基本操作</h3><h5 id="1-打开客户端交互窗口"><a href="#1-打开客户端交互窗口" class="headerlink" title="1. 打开客户端交互窗口"></a>1. 打开客户端交互窗口</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/mongodb/bin/mongo 192.168.138.156:27017</span><br></pre></td></tr></table></figure><blockquote><p>注：<br>a. mongodb 客户端是一个javascript交互窗口，可以直接写js代码<br>b. mongodb和mysql数据库有点类似，有数据库的概念，在使用时需要先选中数据库，再执行操作</p></blockquote><h5 id="2-数据库相关操作"><a href="#2-数据库相关操作" class="headerlink" title="2. 数据库相关操作"></a>2. 数据库相关操作</h5><p>  <code>show dbs</code> 展示所有数据库<br>  <img src="3.png" alt=""><br>  <code>db</code> 展示当前使用的数据库<br>  <img src="4.png" alt=""><br>  <code>use 数据库名</code> 切换到指定数据库<br>  <img src="5.png" alt=""><br>  <code>db.dropDatabase();</code> 删除数据库<br>  <img src="6.png" alt=""><br>  <code>db.help();</code> 帮助命令<br>  <img src="7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/16/MongoDB概述/logo.jpg&quot; title=&quot;图片&quot;&gt;
&lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h3&gt;&lt;h5 id=&quot;MongoDB-是一款免费开源的NOSQL文档型数据库，旨在为WEB应用提供可护展的高性能数据存储解决方案。&quot;&gt;&lt;a href=&quot;#MongoDB-是一款免费开源的NOSQL文档型数据库，旨在为WEB应用提供可护展的高性能数据存储解决方案。&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 是一款免费开源的NOSQL文档型数据库，旨在为WEB应用提供可护展的高性能数据存储解决方案。&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;a href=&quot;https://www.mongodb.com/what-is-mongodb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MongoDB&lt;/a&gt;&lt;/em&gt; 是一款免费开源的NOSQL文档型数据库，旨在为WEB应用提供可护展的高性能数据存储解决方案。&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;NOSQL(not only sql)：&lt;/em&gt;指的是非关系型数据库,没有固定的存储格式，一般适用于超大规模数据的存储。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;NOSQL&lt;/em&gt;优点：高可用、可扩展、低成本、数据结构灵活&lt;/li&gt;
&lt;li&gt;&lt;em&gt;NOSQL&lt;/em&gt;缺点：弱化事务&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://www.gaozhy.cn/categories/Big-Data/"/>
    
    
      <category term="NOSQL" scheme="http://www.gaozhy.cn/tags/NOSQL/"/>
    
      <category term="数据库" scheme="http://www.gaozhy.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS概述 (一)</title>
    <link href="http://www.gaozhy.cn/2018/01/11/FastDFS%E6%A6%82%E8%BF%B0/"/>
    <id>http://www.gaozhy.cn/2018/01/11/FastDFS概述/</id>
    <published>2018-01-11T00:12:16.000Z</published>
    <updated>2018-01-11T01:22:07.006Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/11/FastDFS概述/logo.png" title="logo"><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h5 id="FastDFS-是一个开源高性能分布式文件系统，主要功能包括文件存储、文件同步、文件访问（上传和下载），特别适合以文件为载体的在线服务，-如相册网站、-视频网站等。"><a href="#FastDFS-是一个开源高性能分布式文件系统，主要功能包括文件存储、文件同步、文件访问（上传和下载），特别适合以文件为载体的在线服务，-如相册网站、-视频网站等。" class="headerlink" title="FastDFS 是一个开源高性能分布式文件系统，主要功能包括文件存储、文件同步、文件访问（上传和下载），特别适合以文件为载体的在线服务， 如相册网站、 视频网站等。"></a><em><a href="https://github.com/happyfish100/fastdfs" target="_blank" rel="noopener">FastDFS</a></em> 是一个开源高性能分布式文件系统，主要功能包括文件存储、文件同步、文件访问（上传和下载），特别适合以文件为载体的在线服务， 如相册网站、 视频网站等。</h5><blockquote><p>FastDFS is an open source high performance distributed file system. It’s major functions include: file storing, file syncing and file accessing (file uploading and file downloading), and it can resolve the high capacity and load balancing problem. FastDFS should meet the requirement of the website whose service based on files such as photo sharing site and video sharing site.</p><footer><strong>@DevDocs——</strong><cite><a href="https://github.com/happyfish100/fastdfs" target="_blank" rel="noopener">Introduction</a></cite></footer></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/11/FastDFS概述/logo.png&quot; title=&quot;logo&quot;&gt;
&lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h3&gt;&lt;h5 id=&quot;FastDFS-是一个开源高性能分布式文件系统，主要功能包括文件存储、文件同步、文件访问（上传和下载），特别适合以文件为载体的在线服务，-如相册网站、-视频网站等。&quot;&gt;&lt;a href=&quot;#FastDFS-是一个开源高性能分布式文件系统，主要功能包括文件存储、文件同步、文件访问（上传和下载），特别适合以文件为载体的在线服务，-如相册网站、-视频网站等。&quot; class=&quot;headerlink&quot; title=&quot;FastDFS 是一个开源高性能分布式文件系统，主要功能包括文件存储、文件同步、文件访问（上传和下载），特别适合以文件为载体的在线服务， 如相册网站、 视频网站等。&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/happyfish100/fastdfs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FastDFS&lt;/a&gt;&lt;/em&gt; 是一个开源高性能分布式文件系统，主要功能包括文件存储、文件同步、文件访问（上传和下载），特别适合以文件为载体的在线服务， 如相册网站、 视频网站等。&lt;/h5&gt;&lt;blockquote&gt;&lt;p&gt;FastDFS is an open source high performance distributed file system. It’s major functions include: file storing, file syncing and file accessing (file uploading and file downloading), and it can resolve the high capacity and load balancing problem. FastDFS should meet the requirement of the website whose service based on files such as photo sharing site and video sharing site.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;@DevDocs——&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://github.com/happyfish100/fastdfs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Introduction&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://www.gaozhy.cn/categories/Big-Data/"/>
    
    
      <category term="分布式" scheme="http://www.gaozhy.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="文件系统" scheme="http://www.gaozhy.cn/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Solr轻松入门</title>
    <link href="http://www.gaozhy.cn/2018/01/07/Solr%E8%BD%BB%E6%9D%BE%E5%85%A5%E9%97%A8/"/>
    <id>http://www.gaozhy.cn/2018/01/07/Solr轻松入门/</id>
    <published>2018-01-07T03:24:18.000Z</published>
    <updated>2018-01-07T03:30:31.797Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/07/Solr轻松入门/logo.jpg" title="学习笔记"><h2 id="1-Solr概述"><a href="#1-Solr概述" class="headerlink" title="1. Solr概述"></a>1. Solr概述</h2><ul><li>Solr是Apache下的顶级项目，采用java开发，它是基于Lucene的全文检索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。</li><li>Solr可以运行在Jetty、Tomcat等Web服务器。</li></ul><a id="more"></a><h2 id="2-Solr架构（体系架构）"><a href="#2-Solr架构（体系架构）" class="headerlink" title="2. Solr架构（体系架构）"></a>2. Solr架构（体系架构）</h2><ul><li>系统架构图<br>  <img src="1.jpg" alt=""></li><li>组件<ul><li><strong>请求处理程序</strong>  - 发送到<strong>Apache Solr</strong>的请求由这些请求处理程序处理。请求可以是查询请求或索引更新请求。根据这些请示的要求来选择请求处理程序。为了将请求传递给Solr，通常将处理器映射到某个URI端点，并且它将为指定的请求提供服务。</li><li><strong>搜索组件</strong>  -  搜索组件是<strong>Apache Solr</strong>中提供的搜索类型(功能)。它可能是拼写检查，查询，构面，命中突出显示等。这些搜索组件被注册为搜索处理程序。多个组件可以注册到搜索处理程序。</li><li><strong>查询解析器</strong>− <strong>Apache Solr</strong>查询解析器解析传递给Solr的查询，并验证查询的语法是否有错误。解析查询后，将它们转换为Lucene理解的格式。</li><li><strong>响应写入器</strong> - <strong>Apache Solr</strong>中的响应写入器是为用户查询生成格式化输出的组件。 Solr支持XML，JSON，CSV等响应格式。对每种类型的响应都有不同的响应写入。</li><li><strong>分析器/分词器</strong> - Lucene以令牌的形式识别数据。 Apache Solr分析内容，将其分成令牌，并将这些令牌传递给Lucene。 Apache Solr中的分析器检查字段的文本并生成令牌流。分词器将分析器准备的令牌流分解成令牌。</li><li><strong>更新请求处理器</strong>- 每当向Apache Solr发送更新请求时，请求都通过一组称为更新请求处理器的插件(签名，日志记录，索引)运行。这个处理器负责修改，例如删除字段，添加字段等。</li></ul></li></ul><h2 id="3-Solr安装和环境搭建"><a href="#3-Solr安装和环境搭建" class="headerlink" title="3. Solr安装和环境搭建"></a>3. Solr安装和环境搭建</h2><ul><li>下载（windows：版本号：solr-5.5.0.zip）</li><li>Solr目录介绍<ol><li>bin： 运行脚本目录</li><li>contrib： 插件目录</li><li>dist： solr相关jar包</li><li>doc： 文档目录</li><li>example： solr示例项目</li><li>server： 服务相关数据</li></ol></li><li>Solr所需环境<ol><li>jdk1.7+、Web服务器Tomcat8.0</li></ol></li><li><p>Solr和Tomcat整合</p><ol><li>在tomcat的webapps目录新建文件夹solr，并将solr-5.5.0\server\solr-webapp\webapp目录下的所有资源复制过来</li><li>将solr-5.5.0\server\lib\ext下的所有jar包复制到tomcat\webapps\solr\WEB-INF\lib</li><li>将solr-5.5.0\server\resources\log4j.properties文件复制到tomcat\webapps\solr\WEB-INF\classes目录（<em>如果没有classes目录请新建</em>）</li><li>在tomcat目录下新建solr-home文件夹 </li><li>将solr-5.5.0\server\solr目录下的所有文件复制到tomcat\solr-home目录</li><li><p>修改tomcat\webapps\solr\WEB-INF\web.xml文件,指定solr-home目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--取消注释，并配置solr-home--&gt;</span><br><span class="line">&lt;env-entry&gt;</span><br><span class="line">      &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;</span><br><span class="line">      &lt;env-entry-value&gt;F:\solr\tomcat\solr-home&lt;/env-entry-value&gt;</span><br><span class="line">      &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;</span><br><span class="line">   &lt;/env-entry&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动tomcat，输入地址<a href="http://localhost:8080/solr/admin.html" title="http://localhost:8080/solr/admin.html" target="_blank" rel="noopener">http://localhost:8080/solr/admin.html</a></p></li><li>在tomcat\solr-home\目录下新建core</li><li>将tomcat\solr-home\configsets\basic_configs\conf文件夹复制到tomcat\solr-home\core目录下</li><li>重启tomcat，打开浏览器输入网址<a href="http://localhost:8080/solr/admin.html" title="http://localhost:8080/solr/admin.html" target="_blank" rel="noopener">http://localhost:8080/solr/admin.html</a></li><li>添加core<br><img src="2.jpg" alt=""></li></ol></li></ul><h2 id="4-solr的相关配置文件"><a href="#4-solr的相关配置文件" class="headerlink" title="4. solr的相关配置文件"></a>4. solr的相关配置文件</h2><ul><li><p>managed-schema配置文件</p><ol><li><p>type部分</p><blockquote><p>fieldType 是一些常见的可重用定义，定义了 Solr（和 Lucene）如何处理 Field。也就是添加到索引中的xml文件属性中的类型，如int、text、date等。    </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldType name=&quot;tint&quot; class=&quot;solr.TrieIntField&quot; precisionStep=&quot;8&quot; positionIncrementGap=&quot;0&quot;/&gt;</span><br><span class="line">   &lt;fieldType name=&quot;tfloat&quot; class=&quot;solr.TrieFloatField&quot; precisionStep=&quot;8&quot; positionIncrementGap=&quot;0&quot;/&gt;</span><br><span class="line">   &lt;fieldType name=&quot;tlong&quot; class=&quot;solr.TrieLongField&quot; precisionStep=&quot;8&quot; positionIncrementGap=&quot;0&quot;/&gt;</span><br><span class="line">   &lt;fieldType name=&quot;tdouble&quot; class=&quot;solr.TrieDoubleField&quot; precisionStep=&quot;8&quot; positionIncrementGap=&quot;0&quot;/&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>fields部分</p><blockquote><p>filed是你添加到索引文件中出现的属性名称</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;field name=&quot;_root_&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;false&quot;/&gt;</span><br><span class="line">&lt;dynamicField name=&quot;*_i&quot;  type=&quot;int&quot;    indexed=&quot;true&quot;  stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;!-- 复制field 从source到dest 分词前复制 经过不同的分词器可以得到不同的分词结果 --&gt;</span><br><span class="line">&lt;copyField source=&quot;title&quot; dest=&quot;text&quot;/&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>其它配置<br> a. uniqueKey：唯一键，这里配置的是上面出现的fileds，一般是id、url等不重复的。在更新、删除的时候可以用到<br> b. defaultSearchField：默认搜索属性，如q=solr就是默认的搜索那个字段<br> c. solrQueryParser：查询转换模式，是并且还是或者（AND/OR必须大写）  </p></li></ol></li><li><p>solrconfig.xml</p><blockquote><p>solr的核心配置文件,该配置文件主要定义了solr的一些处理规则，包括索引数据的存放位置，更新，删除，查询的一些规则配置</p></blockquote><ol><li><p>dataDir </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定义了索引数据和日志文件的存放位置--&gt;</span><br><span class="line">&lt;dataDir&gt;$&#123;solr.data.dir:d:/Server/Solr/data&#125;&lt;/dataDir&gt;</span><br></pre></td></tr></table></figure></li><li><p>luceneMatchVersion </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--solr底层使用的是lucene4.8--&gt;</span><br><span class="line">&lt;luceneMatchVersion&gt;4.8&lt;/luceneMatchVersion&gt;</span><br></pre></td></tr></table></figure></li><li><p>directoryFactory 索引存储方案 默认为NRTCachingDirectoryFactory</p></li><li>codecFactory 编解码工厂  定义了索引格式工具</li><li>indexconfig  索引配置</li><li>updateHandler 更新器</li><li>query</li><li>requestDispatcher 请求转发器</li><li><p>requestHandler 请求处理器</p><blockquote><p>输入的请求会通过请求中的路径被转发到特定的处理器</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--SearchHandler基本的请求处理器是SearchHandler,它提供一系列SearchComponents,通过multiple shards支持分布式--&gt;</span><br><span class="line">&lt;requestHandler name=&quot;/select&quot; class=&quot;solr.SearchHandler&quot;&gt;</span><br><span class="line">   &lt;!-- default values for query parameters can be specified, these</span><br><span class="line">        will be overridden by parameters in the request</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;lst name=&quot;defaults&quot;&gt;</span><br><span class="line">      &lt;str name=&quot;echoParams&quot;&gt;explicit&lt;/str&gt;</span><br><span class="line">      &lt;int name=&quot;rows&quot;&gt;10&lt;/int&gt;</span><br><span class="line">    &lt;/lst&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/requestHandler&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="5-solr整合中文分词器（IK、mmseg4j、smartcn）"><a href="#5-solr整合中文分词器（IK、mmseg4j、smartcn）" class="headerlink" title="5. solr整合中文分词器（IK、mmseg4j、smartcn）"></a>5. solr整合中文分词器（IK、mmseg4j、smartcn）</h2><ul><li><p>IK中文分词器</p><ol><li>将ikanalyzer-solr5\ik-analyzer-solr5-5.x.jar复制到tomcat\webapps\solr\WEB-INF\lib目录</li><li><p>修改solr-home\baizhi\conf\managed-schema，新增</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--添加域 并使用ik分词--&gt;</span><br><span class="line">&lt;field name=&quot;name&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加的IK分词 --&gt;</span><br><span class="line">   &lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&gt;   </span><br><span class="line">     &lt;analyzer type=&quot;index&quot; isMaxWordLength=&quot;false&quot; class=&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;/&gt;   </span><br><span class="line">     &lt;analyzer type=&quot;query&quot; isMaxWordLength=&quot;true&quot; class=&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;/&gt;   </span><br><span class="line">   &lt;/fieldType&gt;</span><br></pre></td></tr></table></figure></li><li><p>ikanalyzer-solr5\目录下的IKAnalyzer.cfg.xml、ext.dic、stopword.dic文件拷贝到tomcat\webapps\solr\WEB-INF\classes</p></li><li>重启tomcat</li><li>测试中文分词<br> <img src="4.jpg" alt="ik中文分词测试"></li></ol></li><li><p>mmseg4j中文分词器</p><ol><li>将mmseg4j-core-1.10.0.jar、mmseg4j-solr-2.3.0.jar复制到tomcat\webapps\solr\WEB-INF\lib目录</li><li><p>修改solr-home\baizhi\conf\managed-schema，新增</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--测试mmseg4j--&gt;</span><br><span class="line">  &lt;field name=&quot;mmseg4j_name&quot; type=&quot;textComplex&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mmseg4j中文分词器--&gt;</span><br><span class="line">   &lt;fieldtype name=&quot;textComplex&quot; class=&quot;solr.TextField&quot; positionIncrementGap=&quot;100&quot;&gt;</span><br><span class="line">     &lt;analyzer&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">dicPath 参数 － 设置自定义的扩展词库，支持相对路径(相对于 solr_home)</span><br><span class="line">mode 参数 － 分词模式</span><br><span class="line">--&gt;</span><br><span class="line">       &lt;tokenizer class=&quot;com.chenlb.mmseg4j.solr.MMSegTokenizerFactory&quot; mode=&quot;complex&quot; dicPath=&quot;dic&quot;/&gt;</span><br><span class="line">     &lt;/analyzer&gt;</span><br><span class="line">   &lt;/fieldtype&gt;</span><br><span class="line">   &lt;fieldtype name=&quot;textMaxWord&quot; class=&quot;solr.TextField&quot; positionIncrementGap=&quot;100&quot;&gt;</span><br><span class="line">     &lt;analyzer&gt;</span><br><span class="line">       &lt;tokenizer class=&quot;com.chenlb.mmseg4j.solr.MMSegTokenizerFactory&quot; mode=&quot;max-word&quot; /&gt;</span><br><span class="line">     &lt;/analyzer&gt;</span><br><span class="line">   &lt;/fieldtype&gt;</span><br><span class="line">   &lt;fieldtype name=&quot;textSimple&quot; class=&quot;solr.TextField&quot; positionIncrementGap=&quot;100&quot;&gt;</span><br><span class="line">     &lt;analyzer&gt;</span><br><span class="line">       &lt;tokenizer class=&quot;com.chenlb.mmseg4j.solr.MMSegTokenizerFactory&quot; mode=&quot;simple&quot; dicPath=&quot;dic&quot; /&gt;</span><br><span class="line">     &lt;/analyzer&gt;</span><br><span class="line">   &lt;/fieldtype&gt;</span><br></pre></td></tr></table></figure></li><li><p>自定义扩展词,名字必须为<strong>wordsXXX.dic</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tokenizer class=&quot;com.chenlb.mmseg4j.solr.MMSegTokenizerFactory&quot; mode=&quot;simple&quot; dicPath=&quot;F:\solr\apache-tomcat-8.5.15\webapps\solr\WEB-INF\classes\dic&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>重启tomcat</p></li><li>测试中文分词<br> <img src="3.jpg" alt=""></li></ol></li><li>smartcn中文分词（同理）</li></ul><h2 id="6-使用solr的dataimport导入数据库数据"><a href="#6-使用solr的dataimport导入数据库数据" class="headerlink" title="6. 使用solr的dataimport导入数据库数据"></a>6. 使用solr的dataimport导入数据库数据</h2><ul><li><p>full-import（全部导入）</p><ol><li>首先找到solr-5.5.0\dist\solr-dataimporthandler-5.5.0.jar、solr-dataimporthandler-extras-5.5.0.jar，把这个文件复制到tomcat\webapps\solr\WEB-INF/lib/下，并且找到相应数据库的驱动包，也同样放到该目录。这里用的是mysql的驱动包</li><li>将solr-5.5.0\example\example-DIH\solr\db\conf\db-data-config.xml复制到复制到solr-home/baizhi/conf/下，并改名为data-config.xml</li><li><p>修改tomcat\solr-home\baizhi\conf\solrconfig.xml,添加内容</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置数据库导入--&gt;</span><br><span class="line"> &lt;requestHandler name=&quot;/dataimport&quot; class=&quot;solr.DataImportHandler&quot;&gt;</span><br><span class="line">    &lt;lst name=&quot;defaults&quot;&gt;</span><br><span class="line">      &lt;str name=&quot;config&quot;&gt;data-config.xml&lt;/str&gt;</span><br><span class="line">    &lt;/lst&gt;</span><br><span class="line"> &lt;/requestHandler&gt;</span><br></pre></td></tr></table></figure></li><li><p>打开并编辑data-config.xml</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataConfig&gt;</span><br><span class="line">&lt;!-- 这是mysql的配置，学会jdbc的都应该看得懂 --&gt;</span><br><span class="line">    &lt;dataSource driver=&quot;com.mysql.jdbc.Driver&quot; url=&quot;jdbc:mysql://localhost:3306/lucene&quot; user=&quot;root&quot; password=&quot;root&quot; /&gt;</span><br><span class="line">    &lt;document&gt;</span><br><span class="line">&lt;!-- name属性，就代表着一个文档，可以随便命名 --&gt;</span><br><span class="line">      &lt;!-- query是一条sql，代表在数据库查找出来的数据 --&gt;</span><br><span class="line">        &lt;entity name=&quot;user&quot; query=&quot;select * from t_user&quot;&gt;</span><br><span class="line">    &lt;!-- 每一个field映射着数据库中列与文档中的域，column是数据库列，name是solr的域(必须是在managed-schema文件中配置过的域才行) --&gt;</span><br><span class="line">            &lt;field column=&quot;id&quot; name=&quot;id&quot; /&gt;</span><br><span class="line">            &lt;field column=&quot;name&quot; name=&quot;mmseg4j_name&quot;/&gt;</span><br><span class="line">            &lt;field column=&quot;last_update_time&quot; name=&quot;last_update_time_dt&quot;/&gt;</span><br><span class="line">        &lt;/entity&gt;</span><br><span class="line">    &lt;/document&gt;</span><br><span class="line">&lt;/dataConfig&gt;</span><br></pre></td></tr></table></figure></li><li><p>重启tomcat</p></li><li>测试<br> <img src="5.jpg" alt=""></li></ol></li><li><p>delta-import（增量导入）</p><blockquote><p>全量导入在数据量大的时候代价非常大，一般来说都会使用增量的方式来导入数据（将最新的数据进行导入）</p></blockquote><ol><li><p>修改配置文件data-config.xml</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataConfig&gt;</span><br><span class="line">    &lt;dataSource driver=&quot;com.mysql.jdbc.Driver&quot; url=&quot;jdbc:mysql://localhost:3306/lucene&quot; user=&quot;root&quot; password=&quot;root&quot; /&gt;</span><br><span class="line">    &lt;document&gt;</span><br><span class="line">        &lt;entity name=&quot;user&quot;</span><br><span class="line">                query=&quot;select * from t_user&quot;</span><br><span class="line">&lt;!--查询增量数据id--&gt;</span><br><span class="line">                deltaQuery=&quot;select id from t_user where last_update_time &amp;gt; &apos;$&#123;dataimporter.last_index_time&#125;&apos;&quot;</span><br><span class="line">&lt;!--根据增量数据id，查询增量数据信息--&gt;</span><br><span class="line">                deltaImportQuery=&quot;select * from t_user where id = &apos;$&#123;dataimporter.delta.id&#125;&apos;&quot;</span><br><span class="line">            &gt;</span><br><span class="line">            </span><br><span class="line">            &lt;field column=&quot;id&quot; name=&quot;id&quot; /&gt;</span><br><span class="line">            &lt;field column=&quot;name&quot; name=&quot;mmseg4j_name&quot;/&gt;</span><br><span class="line">            &lt;field column=&quot;last_update_time&quot; name=&quot;last_update_time_dt&quot;/&gt;</span><br><span class="line">        &lt;/entity&gt;</span><br><span class="line">    &lt;/document&gt;</span><br><span class="line">&lt;/dataConfig&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>deltaImportQuery与deltaQuery, deltaImportQuery使用deltaQuery返回的文章id作为查询条件，然后进行增量导入。</li><li>dataimporter.last_index_time  ：存储在文件import.properties 中</li><li>dataimporter.delta.id：deltaImportQuery 返回的id</li></ol></blockquote></li><li>重启tomcat</li><li>测试<br> <img src="6.jpg" alt="">    </li></ol></li><li><p>复杂导入</p><ol><li>一对多导入（列：唐代诗人和其诗作,一对多关系）</li><li><p>数据库表如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `poets` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,</span><br><span class="line">  `created_at` datetime DEFAULT NULL,</span><br><span class="line">  `updated_at` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2529 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `poetries` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `poet_id` int(11) DEFAULT NULL,</span><br><span class="line">  `content` text COLLATE utf8_unicode_ci,</span><br><span class="line">  `title` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,</span><br><span class="line">  `created_at` datetime DEFAULT NULL,</span><br><span class="line">  `updated_at` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=13220 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;</span><br></pre></td></tr></table></figure></li><li><p>solr配置如下<br> data-config.xml</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataConfig&gt;</span><br><span class="line">    &lt;dataSource driver=&quot;com.mysql.jdbc.Driver&quot; url=&quot;jdbc:mysql://localhost:3306/lucene&quot; user=&quot;root&quot; password=&quot;root&quot; /&gt;</span><br><span class="line">    &lt;document&gt;</span><br><span class="line">        &lt;entity name=&quot;poetries&quot; </span><br><span class="line">                query=&quot;select * from poetries&quot;</span><br><span class="line">                deltaQuery=&quot;select id from poetries where updated_at &amp;gt; &apos;$&#123;dataimporter.last_index_time&#125;&apos;&quot;</span><br><span class="line">                deltaImportQuery=&quot;select * from poetries where id = &apos;$&#123;dataimporter.delta.id&#125;&apos;&quot;</span><br><span class="line">         &gt;</span><br><span class="line">            &lt;field column=&quot;id&quot; name=&quot;id&quot;/&gt;</span><br><span class="line">            &lt;field column=&quot;content&quot; name=&quot;poetries_content&quot;/&gt;</span><br><span class="line">            &lt;field column=&quot;title&quot; name=&quot;poetries_title&quot;/&gt;</span><br><span class="line">            &lt;field column=&quot;created_at&quot; name=&quot;poetries_created_at&quot;/&gt;</span><br><span class="line">            &lt;field column=&quot;updated_at&quot; name=&quot;poetries_updated_at&quot;/&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;entity name=&quot;poet&quot;</span><br><span class="line">                query=&quot;select * from poets where id=$&#123;poetries.poet_id&#125;&quot; </span><br><span class="line">                deltaQuery=&quot;select id from poets where updated_at &amp;gt; &apos;$&#123;dataimporter.last_index_time&#125;&apos;&quot;</span><br><span class="line">                deltaImportQuery=&quot;select * from poets where id = &apos;$&#123;dataimporter.delta.id&#125;&apos;&quot;</span><br><span class="line">            &gt;</span><br><span class="line">            </span><br><span class="line">                &lt;field column=&quot;id&quot; name=&quot;poet_id&quot; /&gt;</span><br><span class="line">                &lt;field column=&quot;name&quot; name=&quot;poet_name&quot;/&gt;</span><br><span class="line">                &lt;field column=&quot;created_at&quot; name=&quot;poet_created_at&quot;/&gt;</span><br><span class="line">                &lt;field column=&quot;updated_at&quot; name=&quot;poet_updated_at&quot;/&gt;</span><br><span class="line">            &lt;/entity&gt;</span><br><span class="line">        </span><br><span class="line">         &lt;/entity&gt;</span><br><span class="line">    &lt;/document&gt;</span><br><span class="line">&lt;/dataConfig&gt;</span><br></pre></td></tr></table></figure><p> managed-schema</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--诗人--&gt;</span><br><span class="line">&lt;field name=&quot;poet_id&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;field name=&quot;poet_name&quot; type=&quot;textComplex&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;field name=&quot;poet_created_at&quot; type=&quot;date&quot; indexed=&quot;true&quot; stored=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;field name=&quot;poet_updated_at&quot; type=&quot;date&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--诗集--&gt;</span><br><span class="line"></span><br><span class="line">&lt;field name=&quot;poetries_content&quot; type=&quot;textComplex&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt; </span><br><span class="line"></span><br><span class="line">&lt;field name=&quot;poetries_title&quot; type=&quot;textComplex&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;field name=&quot;poetries_created_at&quot; type=&quot;date&quot; indexed=&quot;true&quot; stored=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;field name=&quot;poetries_updated_at&quot; type=&quot;date&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>导入数据<br> <img src="7.jpg" alt=""></p></li><li>测试<br> <img src="8.jpg" alt=""></li></ol></li></ul><h2 id="7-查询参数"><a href="#7-查询参数" class="headerlink" title="7. 查询参数"></a>7. 查询参数</h2><ul><li>常用查询参数<ol><li>q - 查询字符串，如果查询所有*:* (id:1)</li><li>fq - (filter query)使用Filter Query可以充分利用FilterQuery Cache，提高检索性能。作用：在q查询符合结果中同时是fq查询符合的，例如：q=mm&amp;fq=date_time:[20081001TO 20091031]，找关键字mm，并且date_time是20081001到20091031之间的。（fq查询字段后面的冒号和关键字必须有）</li><li>sort - 排序，格式：sort=<field name="">+<desc|asc>[,<field name="">+<desc|asc>]… 。示例：（score desc, price asc）表示先 “score” 降序, 再 “price” 升序，默认是相关性降序</desc|asc></field></desc|asc></field></li><li>start - 用于分页定义结果起始记录数，默认为0，从第1条记录开始。</li><li>rows - 用于分页定义结果每页返回记录数，默认为10。</li><li>fl - field list，指定返回结果字段。以空格“ ”或逗号“,”分隔。</li><li>df - 默认的查询字段，一般默认指定。</li><li>wt - writer type。指定查询输出结构格式，输出格式：xml、json、Python、ruby、PHP、phps、custom</li><li>indent - 返回的结果是否缩进，默认关闭，用indent=true|on 开启，一般调试json,php,phps,ruby输出才有必要用这个参数。</li><li>debugQuery - 设置返回结果是否显示Debug信息</li><li>q.op - 表示q中查询语句的各条件的逻辑操作 AND(与)OR(或)</li><li>hl - 是否高亮 ,如hl=true</li><li>hl.fl - 高亮field ,hl.fl=Name,SKU</li><li>hl.snippets - 默认是1,这里设置为3个片段</li><li>hl.simple.pre - 高亮前面的格式</li><li>hl.simple.post - 高亮后面的格式</li><li>facet - 是否启动统计</li><li>facet.field - 统计field</li></ol></li><li>常用查询语法<ol><li>“:” 指定字段查指定值，如返回所有值<em>:</em></li><li>“?” 表示单个任意字符的通配</li><li>“*” 表示多个任意字符的通配（不能在检索的项开始使用*或者?符号）</li><li>“~” 表示模糊检索，如检索拼写类似于”roam”的项这样写：roam~将找到形如foam和roams的单词；roam~0.8，检索返回相似度在0.8以上的记录。</li><li>邻近检索，如检索相隔10个单词的”apache”和”jakarta”，”jakarta apache”~10</li><li>“^” 控制相关度检索，如检索jakarta apache，同时希望去让”jakarta”的相关度更加好，那么在其后加上”^”符号和增量值，即jakarta^4 apache</li><li>布尔操作符AND、&amp;&amp;</li><li>布尔操作符OR、||</li><li>布尔操作符NOT、!、- （排除操作符不能单独与项使用构成查询）</li><li>“+” 存在操作符，要求符号”+”后的项必须在文档相应的域中存在</li><li>( ) 用于构成子查询</li><li>[] 包含范围检索，如检索某时间段记录，包含头尾，date:[200707 TO 200710]</li></ol></li></ul><h2 id="8-SolrJ的使用"><a href="#8-SolrJ的使用" class="headerlink" title="8. SolrJ的使用"></a>8. SolrJ的使用</h2><ul><li><p>引入MAVEN的依赖，solrj的版本号要对应solr的版本号</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.solr/solr-solrj --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.solr&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;solr-solrj&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;5.5.0&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>新增和修改索引</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">private static String serverUrl = &quot;http://localhost:8080/solr/baizhi&quot;;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 新增和修改索引</span><br><span class="line">    *   修改索引同理：索引存在修改，不存在新增</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void addOrUpdateIndex() &#123;</span><br><span class="line"></span><br><span class="line">       try &#123;</span><br><span class="line">           SolrClient solrClient = new HttpSolrClient(serverUrl);</span><br><span class="line"></span><br><span class="line">           /*</span><br><span class="line">           SolrInputDocument solrInputDocument = new SolrInputDocument();</span><br><span class="line"></span><br><span class="line">           solrInputDocument.addField(&quot;id&quot;,&quot;1&quot;);</span><br><span class="line">           solrInputDocument.addField(&quot;poetries_title&quot;,&quot;李白&quot;);</span><br><span class="line"></span><br><span class="line">           solrClient.add(solrInputDocument);</span><br><span class="line">           */</span><br><span class="line"></span><br><span class="line">           ArrayList&lt;Poetry&gt; poetries = new ArrayList&lt;Poetry&gt;();</span><br><span class="line">           for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">               Poetry poetry = new Poetry(i+1,&quot;上课头疼的故事&quot;,&quot;头好痛&quot;,new Date(),new Date());</span><br><span class="line">               poetries.add(poetry);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // 注意：bean需要使用@Field注解,绑定属性和其索引域Field</span><br><span class="line">           solrClient.addBeans(poetries);</span><br><span class="line"></span><br><span class="line">           solrClient.commit();</span><br><span class="line">           solrClient.close();</span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 删除索引</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void deleteAllIndex()&#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           SolrClient solrClient = new HttpSolrClient(serverUrl);</span><br><span class="line">           //1. 删除一个</span><br><span class="line">           //solrClient.deleteById(&quot;1&quot;);</span><br><span class="line"></span><br><span class="line">           //2. 删除多个</span><br><span class="line">           solrClient.deleteById(Arrays.asList(&quot;1&quot;,&quot;2&quot;));</span><br><span class="line"></span><br><span class="line">           //3. 根据查询条件删除</span><br><span class="line">           solrClient.deleteByQuery(&quot;id:10&quot;);</span><br><span class="line"></span><br><span class="line">           //4. 删除所有索引</span><br><span class="line">           //solrClient.deleteByQuery(&quot;*:*&quot;);</span><br><span class="line">           solrClient.commit();</span><br><span class="line">           solrClient.close();</span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>查询索引</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 查询索引</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void searchIndex()&#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           HttpSolrClient httpSolrClient = new HttpSolrClient(serverUrl);</span><br><span class="line">           /*</span><br><span class="line">           SolrDocument solrDocument = httpSolrClient.getById(&quot;3&quot;);</span><br><span class="line"></span><br><span class="line">           Object poetries_title = solrDocument.get(&quot;poetries_title&quot;);</span><br><span class="line"></span><br><span class="line">           System.out.println(poetries_title);</span><br><span class="line">           */</span><br><span class="line">           // 设置查询参数</span><br><span class="line">           SolrQuery solrQuery = new SolrQuery();</span><br><span class="line">           solrQuery.set(&quot;q&quot;,&quot;poetries_content:上课&quot;);</span><br><span class="line">           solrQuery.set(&quot;start &quot;,0);</span><br><span class="line">           solrQuery.set(&quot;rows&quot;,20);</span><br><span class="line"></span><br><span class="line">           // 过滤查询 id范围在3到6之间</span><br><span class="line">           solrQuery.set(&quot;fq&quot;,&quot;id:[3 TO 6]&quot;);</span><br><span class="line">           // 查询结果 根据id倒序排列 多个排序条件用逗号隔开</span><br><span class="line">           solrQuery.set(&quot;sort&quot;,&quot;id desc&quot;);</span><br><span class="line"></span><br><span class="line">           // 默认搜索域</span><br><span class="line">           solrQuery.set(&quot;df&quot;,&quot;poetries_title&quot;);</span><br><span class="line"></span><br><span class="line">           // 设置高亮</span><br><span class="line">           solrQuery.setHighlight(true);</span><br><span class="line">           // 设置高亮域</span><br><span class="line">           solrQuery.addHighlightField(&quot;poetries_title&quot;);</span><br><span class="line">           solrQuery.addHighlightField(&quot;poetries_content&quot;);</span><br><span class="line"></span><br><span class="line">           solrQuery.setHighlightSimplePre(&quot;&lt;font style=&apos;color:red&apos;&gt;&quot;);</span><br><span class="line">           solrQuery.setHighlightSimplePost(&quot;&lt;/font&gt;&quot;);</span><br><span class="line"></span><br><span class="line">           // 查询</span><br><span class="line">           QueryResponse queryResponse = httpSolrClient.query(solrQuery);</span><br><span class="line"></span><br><span class="line">           // 获取查询结果</span><br><span class="line">           SolrDocumentList results = queryResponse.getResults();</span><br><span class="line"></span><br><span class="line">           System.out.println(&quot;查询出来的结果数：&quot;+results.size());</span><br><span class="line">           System.out.println(&quot;共查询到记录：&quot;+results.getNumFound());</span><br><span class="line"></span><br><span class="line">           // 获取高亮结果</span><br><span class="line">           Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt; highlighting = queryResponse.getHighlighting();</span><br><span class="line"></span><br><span class="line">           // 处理高亮结果集</span><br><span class="line">           for (String s : highlighting.keySet()) &#123;</span><br><span class="line">               Map&lt;String, List&lt;String&gt;&gt; map = highlighting.get(s);</span><br><span class="line">               System.out.println(map);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // 处理普通结果集</span><br><span class="line">           for (SolrDocument result : results) &#123;</span><br><span class="line">               System.out.println(result.get(&quot;id&quot;)+&quot;  &quot;+result.get(&quot;poetries_title&quot;)+&quot; &quot;+result.get(&quot;poetries_content&quot;));</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           httpSolrClient.close();</span><br><span class="line">       &#125; catch (SolrServerException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>SolrCloud未完待续</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/07/Solr轻松入门/logo.jpg&quot; title=&quot;学习笔记&quot;&gt;
&lt;h2 id=&quot;1-Solr概述&quot;&gt;&lt;a href=&quot;#1-Solr概述&quot; class=&quot;headerlink&quot; title=&quot;1. Solr概述&quot;&gt;&lt;/a&gt;1. Solr概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Solr是Apache下的顶级项目，采用java开发，它是基于Lucene的全文检索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。&lt;/li&gt;
&lt;li&gt;Solr可以运行在Jetty、Tomcat等Web服务器。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://www.gaozhy.cn/categories/Big-Data/"/>
    
    
      <category term="全文检索" scheme="http://www.gaozhy.cn/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
      <category term="引擎" scheme="http://www.gaozhy.cn/tags/%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot轻松入门</title>
    <link href="http://www.gaozhy.cn/2018/01/07/Spring-Boot%E8%BD%BB%E6%9D%BE%E5%85%A5%E9%97%A8/"/>
    <id>http://www.gaozhy.cn/2018/01/07/Spring-Boot轻松入门/</id>
    <published>2018-01-07T03:10:59.000Z</published>
    <updated>2018-01-07T03:21:04.994Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/07/Spring-Boot轻松入门/logo.jpg" title="学习笔记"><h2 id="一、-SpringBoot概述"><a href="#一、-SpringBoot概述" class="headerlink" title="一、 SpringBoot概述"></a>一、 SpringBoot概述</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><h5 id="Spring-Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置-习惯优于配置-，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring-Boot致力于在蓬勃发展的快速应用开发领域（rapid-application-development）成为领导者。"><a href="#Spring-Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置-习惯优于配置-，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring-Boot致力于在蓬勃发展的快速应用开发领域（rapid-application-development）成为领导者。" class="headerlink" title="Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置(习惯优于配置)，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。"></a>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置(<strong>习惯优于配置</strong>)，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。</h5><a id="more"></a><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h3><ul><li>创建可以独立运行的 Spring 应用。</li><li>直接嵌入 <em>Tomcat</em> 或 <em>Jetty</em> 服务器，不需要部署war文件。</li><li>提供推荐的基础 <em>POM</em> 文件来简化 <em>Apache Maven</em> 配置。</li><li>尽可能的根据项目依赖来自动配置 Spring 框架。</li><li>提供可以直接在生产环境中使用的功能，如性能指标、应用信息和应用健康检查。</li><li>没有代码生成，也没有XML配置文件（基于注解）。</li></ul><h3 id="3-优点"><a href="#3-优点" class="headerlink" title="3. 优点"></a>3. 优点</h3><ul><li>快速构建项目</li><li>对主流开发框架的无配置集成</li><li>项目可独立运行，无需外部依赖servlet容器</li><li>提供运行时的应用监控</li><li>极大提高了开发、部署效率</li><li>与云计算的天然集成</li></ul><h2 id="二、开发第一个SpringBoot工程"><a href="#二、开发第一个SpringBoot工程" class="headerlink" title="二、开发第一个SpringBoot工程"></a>二、开发第一个SpringBoot工程</h2><h3 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h3><ul><li><em>Spring Boot 1.5.7.RELEASE</em></li><li><em>JDK1.7+</em></li><li><em>Spring Framework 4.3.11.RELEASE+</em></li><li><em>maven3.2.0+</em></li></ul><h3 id="2-创建SpringBoot工程"><a href="#2-创建SpringBoot工程" class="headerlink" title="2. 创建SpringBoot工程"></a>2. 创建SpringBoot工程</h3><ul><li><p>手动构建</p><ul><li>创建空的Maven Project</li><li><p>修改pom.xml</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 添加spring boot项目的父依赖 --&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;!-- 提供相关的maven默认依赖 --&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring boot Web支持 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">          &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建入口类</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Spring Boot项目入口类</span><br><span class="line"> * @author gaozhy</span><br><span class="line"> */</span><br><span class="line">// Spring Boot的核心注解 目的开启自动配置</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">// main方法为项目入口</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 启动Spring Boot</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>自动构建</p><ul><li>使用sts创建Spring Starter Project</li><li>配置项目信息<br>  <img src="7.jpg" alt=""></li><li>创建项目</li><li>项目目录<br>  <img src="8.jpg" alt=""></li></ul></li></ul><h3 id="3-第一个SpringBoot-Demo"><a href="#3-第一个SpringBoot-Demo" class="headerlink" title="3. 第一个SpringBoot Demo"></a>3. 第一个SpringBoot Demo</h3><ul><li><p>新建RestController</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by gaozhy on 2017/10/4.</span><br><span class="line"> */</span><br><span class="line">@RestController // 组合注解</span><br><span class="line">@RequestMapping</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/&quot;)</span><br><span class="line">    public String index()&#123;</span><br><span class="line">        return &quot;Greetings from Spring Boot&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行启动类|入口类</p></li><li>访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></li></ul><h3 id="4-单元测试"><a href="#4-单元测试" class="headerlink" title="4. 单元测试"></a>4. 单元测试</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 通过@RunWith() + @SpringBootTest开启注解</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class HelloTest &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private HelloService helloService;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testHello()&#123;</span><br><span class="line">System.out.println(helloService.getHello());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><blockquote><h4 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h4><ol><li>无需做任何的web.xml配置</li><li>无需做任何的sping mvc的配置; springboot为你做了</li><li>无需配置tomcat，springboot内嵌tomcat</li><li>启动项目（maven命令spring-boot:run、jar -jar xxx.jar、运行入口类方法）</li></ol></blockquote><h2 id="三、Spring-Boot配置文件详解"><a href="#三、Spring-Boot配置文件详解" class="headerlink" title="三、Spring Boot配置文件详解"></a>三、Spring Boot配置文件详解</h2><blockquote><p>Spring Boot采纳了建立生产就绪Spring应用程序的观点。 Spring Boot优先于配置的惯例，旨在让您尽快启动和运行。在一般情况下，我们不需要做太多的配置就能够让Spring Boot正常运行。在一些特殊的情况下，我们需要做修改一些配置，或者需要有自己的配置属性。</p></blockquote><h3 id="1-Spring-Boot的配置文件application-properties或application-yml"><a href="#1-Spring-Boot的配置文件application-properties或application-yml" class="headerlink" title="1. Spring Boot的配置文件application.properties或application.yml"></a>1. Spring Boot的配置文件application.properties或application.yml</h3><ul><li><p>application.properties    </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port=8989</span><br><span class="line">server.context-path=/helloboot</span><br></pre></td></tr></table></figure></li><li><p>application.yml</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8989</span><br><span class="line">  context-path: /helloboot</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-常规属性配置"><a href="#2-常规属性配置" class="headerlink" title="2. 常规属性配置"></a>2. 常规属性配置</h3><ul><li><p>在application.properties文件中定义一组属性：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=1</span><br><span class="line">name=\u5C0F\u7EA2</span><br></pre></td></tr></table></figure></li><li><p>在需要读取配置文件值的属性上使用@Value(“${名字}”)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;$&#123;id&#125;&quot;)</span><br><span class="line">private Integer id;</span><br><span class="line">@Value(&quot;$&#123;name&#125;&quot;)</span><br><span class="line">private String name;</span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ul><h3 id="3-将配置文件中的属性赋给实体类"><a href="#3-将配置文件中的属性赋给实体类" class="headerlink" title="3. 将配置文件中的属性赋给实体类"></a>3. 将配置文件中的属性赋给实体类</h3><ul><li>通过@ConfigurationProperties将properties属性和一个Bean及其属性关联</li><li><p>在application.properties文件中定义对象的一组属性</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my.id=100</span><br><span class="line">my.name=xiaohei</span><br><span class="line">my.salary=1000</span><br><span class="line">my.uuid=$&#123;random.uuid&#125;</span><br><span class="line"># 10-20的随机数</span><br><span class="line">my.number=$&#123;random.int[10,20]&#125;</span><br></pre></td></tr></table></figure></li><li><p>实体ConfigBean</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix=&quot;my&quot;)</span><br><span class="line">public class ConfigBean &#123;</span><br><span class="line">private Integer id;</span><br><span class="line">private String name;</span><br><span class="line">private Double salary;</span><br><span class="line">private String uuid;</span><br><span class="line">private Integer number;</span><br></pre></td></tr></table></figure></li><li><p>启动测试</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//入口类添加注解</span><br><span class="line">@EnableConfigurationProperties(ConfigBean.class)</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-多个环境配置文件"><a href="#4-多个环境配置文件" class="headerlink" title="4. 多个环境配置文件"></a>4. 多个环境配置文件</h3><blockquote><p>在现实的开发环境中，我们需要不同的配置环境；格式为application-{profile}.properties，其中{profile}对应你的环境标识，比如：</p><ul><li>application-test.properties：测试环境</li><li>application-dev.properties：开发环境</li><li>application-prod.properties：生产环境</li></ul></blockquote><ul><li><p>在application.yml中添加配置</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure></li><li><p>准备application-dev.yml</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">port: 8085</span><br></pre></td></tr></table></figure></li><li><p>启动测试</p></li></ul><h2 id="四、SpringBoot整合JPA"><a href="#四、SpringBoot整合JPA" class="headerlink" title="四、SpringBoot整合JPA"></a>四、SpringBoot整合JPA</h2><blockquote><p><strong>JPA</strong>全称<em>Java Persistence API</em>；JPA通过JDK 5.0注解或XML描述对象和关系表的映射关系，并将运行期的实体对象持久化到数据库中<br><strong>JPA</strong>是需要Provider来实现其功能的，Hibernate就是JPA Provider</p></blockquote><h3 id="1-pom-xml中添加jpa依赖"><a href="#1-pom-xml中添加jpa依赖" class="headerlink" title="1. pom.xml中添加jpa依赖"></a>1. pom.xml中添加jpa依赖</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></code></pre><h3 id="2-application-yml中配置数据源"><a href="#2-application-yml中配置数据源" class="headerlink" title="2. application.yml中配置数据源"></a>2. application.yml中配置数据源</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    url: jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line">    show-sql: true</span><br></pre></td></tr></table></figure></code></pre><h3 id="3-创建实体类"><a href="#3-创建实体类" class="headerlink" title="3. 创建实体类"></a>3. 创建实体类</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@Table(name=&quot;t_user&quot;)</span><br><span class="line">@Entity</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="line">    @Column(name=&quot;u_id&quot;)</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Double salary;</span><br><span class="line"></span><br><span class="line">    @Temporal(value=TemporalType.DATE)</span><br><span class="line">    private Date birthday;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Double getSalary() &#123;</span><br><span class="line">        return salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSalary(Double salary) &#123;</span><br><span class="line">        this.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getBirthday() &#123;</span><br><span class="line">        return birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBirthday(Date birthday) &#123;</span><br><span class="line">        this.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, salary=&quot; + salary +</span><br><span class="line">                &quot;, birthday=&quot; + birthday +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><blockquote><h4 id="Note-1"><a href="#Note-1" class="headerlink" title="Note:"></a>Note:</h4><p>@Table 表信息<br>@Entity 表明类为实体或表<br>@Id 代表标示属性 为数据库主键<br>@GeneratedValue 指定如何标识属性可以被初始化，例如自动，手动，或从序列表中获得的值。<br>@Column 指定持久属性栏属性<br>@Temporal 日期类型</p></blockquote><h3 id="4-创建DAO"><a href="#4-创建DAO" class="headerlink" title="4. 创建DAO"></a>4. 创建DAO</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>JpaRepository</strong>接口封装了常用的增删改成方法，如果不满足需求，可以在DAO接口声明自己的方法</p></blockquote><h3 id="5-创建Service"><a href="#5-创建Service" class="headerlink" title="5. 创建Service"></a>5. 创建Service</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public User queryById(Integer id) &#123;</span><br><span class="line">        User user = userRepository.findOne(id);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;User&gt; queryAll() &#123;</span><br><span class="line">        return userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @Transactional</span><br><span class="line">    public void modifyById(User user) &#123;</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @Transactional</span><br><span class="line">    public void removeById(Integer id) &#123;</span><br><span class="line">        userRepository.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @Transactional</span><br><span class="line">    public void addUser(User user) &#123;</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">        //int i = 1/0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-创建Controller，并构建restful-api测试数据访问"><a href="#6-创建Controller，并构建restful-api测试数据访问" class="headerlink" title="6. 创建Controller，并构建restful api测试数据访问"></a>6. 创建Controller，并构建restful api测试数据访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value=&quot;/add&quot;,method = RequestMethod.PUT)</span><br><span class="line">    public void add(User user)&#123;</span><br><span class="line">        userService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value=&quot;/update&quot;,method = RequestMethod.POST)</span><br><span class="line">    public void update(User user)&#123;</span><br><span class="line">        userService.modifyById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value=&quot;/delete/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span><br><span class="line">    public void delete(@PathVariable(&quot;id&quot;) Integer id)&#123;</span><br><span class="line">        userService.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value=&quot;/findOne/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br><span class="line">    public User findOne(@PathVariable(&quot;id&quot;) Integer id)&#123;</span><br><span class="line">        return userService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value=&quot;/findAll&quot;,method = RequestMethod.GET)</span><br><span class="line">    public List&lt;User&gt; findAll()&#123;</span><br><span class="line">        return userService.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-利用postman请求测试"><a href="#7-利用postman请求测试" class="headerlink" title="7. 利用postman请求测试"></a>7. 利用postman请求测试</h3><h2 id="五、SpringBoot整合MyBaits"><a href="#五、SpringBoot整合MyBaits" class="headerlink" title="五、SpringBoot整合MyBaits"></a>五、SpringBoot整合MyBaits</h2><h3 id="1-pom-xml中添加mybatis依赖"><a href="#1-pom-xml中添加mybatis依赖" class="headerlink" title="1. pom.xml中添加mybatis依赖"></a>1. pom.xml中添加mybatis依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-application-yml中配置数据源-1"><a href="#2-application-yml中配置数据源-1" class="headerlink" title="2. application.yml中配置数据源"></a>2. application.yml中配置数据源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># ===============数据源相关配置=====================</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    url: jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">    # 连接池</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line"></span><br><span class="line"># ===============MyBatis相关配置===================</span><br><span class="line">mybatis:</span><br><span class="line">  type-aliases-package: com.baizhi.entity</span><br><span class="line">  mapper-locations: classpath:com/baizhi/mapper/*Mapper.xml</span><br></pre></td></tr></table></figure><h3 id="3-创建DAO接口"><a href="#3-创建DAO接口" class="headerlink" title="3. 创建DAO接口"></a>3. 创建DAO接口</h3><blockquote><p>DAO接口需要使用注解@Mapper</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// @Mapper 表示 映射器的标记接口</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserDAO &#123;</span><br><span class="line"></span><br><span class="line">    public List&lt;User&gt; findAll();</span><br><span class="line"></span><br><span class="line">    public User findOne(Integer id);</span><br><span class="line"></span><br><span class="line">    public void insert(User user);</span><br><span class="line"></span><br><span class="line">    public void delete(Integer id);</span><br><span class="line"></span><br><span class="line">    public void update(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建Mapper映射文件"><a href="#4-创建Mapper映射文件" class="headerlink" title="4. 创建Mapper映射文件"></a>4. 创建Mapper映射文件</h3><blockquote><p>无变化</p></blockquote><h3 id="5-创建Service-1"><a href="#5-创建Service-1" class="headerlink" title="5. 创建Service"></a>5. 创建Service</h3><blockquote><p>无变化</p></blockquote><h3 id="6-创建Controller，并构建restful-api测试数据访问-1"><a href="#6-创建Controller，并构建restful-api测试数据访问-1" class="headerlink" title="6. 创建Controller，并构建restful api测试数据访问"></a>6. 创建Controller，并构建restful api测试数据访问</h3><blockquote><p>无变化</p></blockquote><h2 id="六、SpringBoot整合Redis"><a href="#六、SpringBoot整合Redis" class="headerlink" title="六、SpringBoot整合Redis"></a>六、SpringBoot整合Redis</h2><h3 id="1-pom-xml中添加redis依赖"><a href="#1-pom-xml中添加redis依赖" class="headerlink" title="1. pom.xml中添加redis依赖"></a>1. pom.xml中添加redis依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-application-yml中配置数据源-2"><a href="#2-application-yml中配置数据源-2" class="headerlink" title="2. application.yml中配置数据源"></a>2. application.yml中配置数据源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: 192.168.128.130</span><br><span class="line">    port: 6379</span><br><span class="line"># redis server 有访问密码需配置此项</span><br><span class="line">    # password:</span><br><span class="line">    database: 0</span><br><span class="line">    pool:</span><br><span class="line">      max-active: 8</span><br><span class="line">      max-wait: -1</span><br><span class="line">      max-idle: 500</span><br><span class="line">      min-idle: 0</span><br><span class="line">    timeout: 3000</span><br></pre></td></tr></table></figure><h3 id="3-创建RedisDAO"><a href="#3-创建RedisDAO" class="headerlink" title="3. 创建RedisDAO"></a>3. 创建RedisDAO</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public class RedisDAOImpl implements RedisDAO&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    public void setKeyValue(String key,String value)&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getValue(String key)&#123;</span><br><span class="line">        return (String) redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setObject(String key,Object obj)&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key,obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object getObject(String key)&#123;</span><br><span class="line">        return redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void delete(String key) &#123;</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-单元测试-1"><a href="#4-单元测试-1" class="headerlink" title="4. 单元测试"></a>4. 单元测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class SpringbootRedisApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private RedisDAO redisDAO;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testRedis() &#123;</span><br><span class="line">//redisDAO.setKeyValue(&quot;username&quot;,&quot;王自健&quot;);</span><br><span class="line">//System.out.println(redisDAO.getValue(&quot;username&quot;));</span><br><span class="line">redisDAO.delete(&quot;username&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、SpringBoot整合Fastjson"><a href="#七、SpringBoot整合Fastjson" class="headerlink" title="七、SpringBoot整合Fastjson"></a>七、SpringBoot整合Fastjson</h2><h3 id="1-pom-xml中添加Fastjson依赖"><a href="#1-pom-xml中添加Fastjson依赖" class="headerlink" title="1. pom.xml中添加Fastjson依赖"></a>1. pom.xml中添加Fastjson依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.31&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-第一种方案"><a href="#2-第一种方案" class="headerlink" title="2. 第一种方案"></a>2. 第一种方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.baizhi.config;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line">import com.alibaba.fastjson.support.config.FastJsonConfig;</span><br><span class="line">import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author gaozhy</span><br><span class="line"> * @description 使用fastjson替换Spring Boot默认的jackson</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Configuration // 此类为配置类</span><br><span class="line">public class WebMvcConfig extends WebMvcConfigurerAdapter&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void configureMessageConverters(</span><br><span class="line">List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line">// 1. 创建json转换器</span><br><span class="line">FastJsonHttpMessageConverter messageConverter = new FastJsonHttpMessageConverter();</span><br><span class="line">// 2. 处理中文乱码</span><br><span class="line">ArrayList&lt;MediaType&gt; mediaTypes = new ArrayList&lt;MediaType&gt;();</span><br><span class="line">mediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">messageConverter.setSupportedMediaTypes(mediaTypes);</span><br><span class="line"></span><br><span class="line">// 3. 配置转换器</span><br><span class="line">FastJsonConfig config = new FastJsonConfig();</span><br><span class="line">config.setSerializerFeatures(SerializerFeature.PrettyFormat); // 优雅的json格式</span><br><span class="line">messageConverter.setFastJsonConfig(config);</span><br><span class="line"></span><br><span class="line">// 4. 添加转换器</span><br><span class="line">converters.add(messageConverter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-第二种方案"><a href="#2-第二种方案" class="headerlink" title="2. 第二种方案"></a>2. 第二种方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @description 通过@Bean注解声明，创建转换器，为其注册fastjson转换器，用以替换jackson</span><br><span class="line"> * @return 表示返回值为一个Bean对象</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public HttpMessageConverters messageConverters()&#123;</span><br><span class="line"></span><br><span class="line">// 1. 创建json转换器</span><br><span class="line">FastJsonHttpMessageConverter messageConverter = new FastJsonHttpMessageConverter();</span><br><span class="line">// 2. 处理中文乱码</span><br><span class="line">List&lt;MediaType&gt; mediaTypes = new ArrayList&lt;MediaType&gt;();</span><br><span class="line"></span><br><span class="line">mediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line"></span><br><span class="line">messageConverter.setSupportedMediaTypes(mediaTypes);</span><br><span class="line">// 3. 配置转换器</span><br><span class="line">FastJsonConfig config = new FastJsonConfig();</span><br><span class="line">// 对响应的json进行格式化处理</span><br><span class="line">config.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line"></span><br><span class="line">messageConverter.setFastJsonConfig(config);</span><br><span class="line">// 4. 添加转换器</span><br><span class="line">return new HttpMessageConverters(messageConverter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><ul><li><p>实体属性加fastjson注解</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@JSONField(format=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">private Date birthday;</span><br></pre></td></tr></table></figure></li><li><p>测试结果<br>  <img src="9.jpg" alt=""></p></li></ul><h2 id="八、SpringBoot配置devtools实现热部署"><a href="#八、SpringBoot配置devtools实现热部署" class="headerlink" title="八、SpringBoot配置devtools实现热部署"></a>八、SpringBoot配置devtools实现热部署</h2><h3 id="1-pom-xml中添加devtools依赖"><a href="#1-pom-xml中添加devtools依赖" class="headerlink" title="1. pom.xml中添加devtools依赖"></a>1. pom.xml中添加devtools依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h3><blockquote><h4 id="Note-2"><a href="#Note-2" class="headerlink" title="Note:"></a>Note:</h4><p>由于热部署是监听 Class 文件的变化，它自身不会主动去编译 Java 文件，所以我们得在 Java 文件改动时，自动编译成 Class 文件，然后热部署工具创造的新的类加载器才会加载改变后的 Class文件。所以，如果你使用 IDEA 开发工具的话，记得要把自动编译打开</p></blockquote><h2 id="九、SpringBoot中整合JSP"><a href="#九、SpringBoot中整合JSP" class="headerlink" title="九、SpringBoot中整合JSP"></a>九、SpringBoot中整合JSP</h2><h3 id="1-pom-xml中添加依赖"><a href="#1-pom-xml中添加依赖" class="headerlink" title="1. pom.xml中添加依赖"></a>1. pom.xml中添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">    &lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-application-yml中配置"><a href="#2-application-yml中配置" class="headerlink" title="2. application.yml中配置"></a>2. application.yml中配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.view.prefix= /WEB-INF/views/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure><h3 id="3-创建jsp文件存放目录src-main-webApp-WEB-INF-views"><a href="#3-创建jsp文件存放目录src-main-webApp-WEB-INF-views" class="headerlink" title="3. 创建jsp文件存放目录src/main/webApp/WEB-INF/views/"></a>3. 创建jsp文件存放目录src/main/webApp/WEB-INF/views/</h3><p><img src="2017-10-05_230438.jpg" alt=""></p><h3 id="4-创建Controller"><a href="#4-创建Controller" class="headerlink" title="4. 创建Controller"></a>4. 创建Controller</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by gaozhy on 2017/10/5.</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/&quot;)</span><br><span class="line">    public String index()&#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public ModelAndView hello(ModelAndView modelAndView)&#123;</span><br><span class="line">        modelAndView.setViewName(&quot;index1&quot;);</span><br><span class="line">        modelAndView.addObject(&quot;username&quot;,&quot;zhangsan&quot;);</span><br><span class="line">        return modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-使用maven命令启动测试"><a href="#5-使用maven命令启动测试" class="headerlink" title="5. 使用maven命令启动测试"></a>5. 使用maven命令启动测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn springboot:run</span><br></pre></td></tr></table></figure><p><img src="2017-10-05_230902.jpg" alt=""></p><blockquote><p><strong>NOTE:</strong></p><h6 id="SpringBoot不推荐使用JSP作为View，而是推荐我们使用模板（如：thymeleaf、freemarker等模板引擎），原因如下："><a href="#SpringBoot不推荐使用JSP作为View，而是推荐我们使用模板（如：thymeleaf、freemarker等模板引擎），原因如下：" class="headerlink" title="SpringBoot不推荐使用JSP作为View，而是推荐我们使用模板（如：thymeleaf、freemarker等模板引擎），原因如下："></a>SpringBoot不推荐使用JSP作为View，而是推荐我们使用模板（如：thymeleaf、freemarker等模板引擎），原因如下：</h6><ol><li>JSP性能较差</li><li>绝对的前后端分离思想，JSP并不利于页面调试（<em>运行依赖于web容器</em>）</li><li>SpringBoot对内嵌web容器的支持默认也是用tomcat。但tomcat对web资源的处理上写死了要使用文件目录，对于打包成jar包的SpringBoot应用来说，显然不行，也有的人打包成war，然后还是部署到tomcat上，这样违反了SpringBoot的初衷，这样一来，等于否定了嵌入式容器，而且程序员还要处理嵌入式环境和外部tomcat环境的不同带来的问题。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/07/Spring-Boot轻松入门/logo.jpg&quot; title=&quot;学习笔记&quot;&gt;
&lt;h2 id=&quot;一、-SpringBoot概述&quot;&gt;&lt;a href=&quot;#一、-SpringBoot概述&quot; class=&quot;headerlink&quot; title=&quot;一、 SpringBoot概述&quot;&gt;&lt;/a&gt;一、 SpringBoot概述&lt;/h2&gt;&lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h3&gt;&lt;h5 id=&quot;Spring-Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置-习惯优于配置-，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring-Boot致力于在蓬勃发展的快速应用开发领域（rapid-application-development）成为领导者。&quot;&gt;&lt;a href=&quot;#Spring-Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置-习惯优于配置-，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring-Boot致力于在蓬勃发展的快速应用开发领域（rapid-application-development）成为领导者。&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置(习惯优于配置)，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。&quot;&gt;&lt;/a&gt;Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置(&lt;strong&gt;习惯优于配置&lt;/strong&gt;)，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。&lt;/h5&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://www.gaozhy.cn/categories/JAVA/"/>
    
    
      <category term="微服务" scheme="http://www.gaozhy.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="框架" scheme="http://www.gaozhy.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>收集的一些图片</title>
    <link href="http://www.gaozhy.cn/2018/01/07/%E6%94%B6%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9B%BE%E7%89%87/"/>
    <id>http://www.gaozhy.cn/2018/01/07/收集的一些图片/</id>
    <published>2018-01-07T02:56:42.000Z</published>
    <updated>2018-01-07T03:09:52.252Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/07/收集的一些图片/wallpaper-2572384.jpg" title="诗和远方"><p> <em>生活除了工作，还有远方！</em></p><a id="more"></a><p><img src="http://blog.zhangruipeng.me/hexo-theme-minos/gallery/guitarist.jpg"><br><img src="http://blog.zhangruipeng.me/hexo-theme-minos/gallery/music2.jpg"><br><img src="https://yiliashaw.github.io/assets/wallpaper-2572384.jpg" width="75%" height="80%"></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/07/收集的一些图片/wallpaper-2572384.jpg&quot; title=&quot;诗和远方&quot;&gt;
&lt;p&gt; &lt;em&gt;生活除了工作，还有远方！&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://www.gaozhy.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="诗和远方" scheme="http://www.gaozhy.cn/tags/%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>拍的一些照片</title>
    <link href="http://www.gaozhy.cn/2018/01/07/%E6%8B%8D%E7%9A%84%E4%B8%80%E4%BA%9B%E7%85%A7%E7%89%87/"/>
    <id>http://www.gaozhy.cn/2018/01/07/拍的一些照片/</id>
    <published>2018-01-07T02:33:43.000Z</published>
    <updated>2018-01-07T03:09:19.201Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/07/拍的一些照片/diary-30.jpg" title="诗和远方"><p><em>生活除了工作，还有远方！</em></p><a id="more"></a><p><img src="DSC_0129_副本.jpg" width="50%" height="50%"><br><img src="DSC_0067_副本.jpg" width="50%" height="30%"><br><img src="DSC_0092_副本.jpg" width="50%" height="50%"><br><img src="DSC_0095_副本.jpg" width="50%" height="50%"><br><img src="DSC_0100_副本.jpg" width="50%" height="50%"><br><img src="DSC_0103_副本.jpg" width="50%" height="50%"><br><img src="DSC_0125_副本.jpg" width="50%" height="50%"><br><img src="DSC_0128_副本.jpg" width="50%" height="50%"><br><img src="DSC_0137_副本.jpg" width="50%" height="50%"><br><img src="DSC_0139_副本.jpg" width="50%" height="50%"><br><img src="DSC_0140_副本.jpg" width="50%" height="50%"><br><img src="DSC_0141_副本.jpg" width="50%" height="50%"><br><img src="DSC_0143_副本.jpg" width="50%" height="50%"><br><img src="DSC_0144_副本.jpg" width="50%" height="50%"><br><img src="DSC_0151_副本.jpg" width="50%" height="50%"><br><img src="DSC_0152_副本.jpg" width="50%" height="50%"><br><img src="DSC_0174_副本.jpg" width="50%" height="50%"><br><img src="DSC_0184_副本.jpg" width="50%" height="50%"><br><img src="DSC_0202_副本.jpg" width="50%" height="50%"><br><img src="DSC_0203_副本.jpg" width="50%" height="50%"></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/07/拍的一些照片/diary-30.jpg&quot; title=&quot;诗和远方&quot;&gt;
&lt;p&gt;&lt;em&gt;生活除了工作，还有远方！&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://www.gaozhy.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="诗和远方" scheme="http://www.gaozhy.cn/tags/%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>致橡树</title>
    <link href="http://www.gaozhy.cn/2018/01/07/%E8%87%B4%E6%A9%A1%E6%A0%91/"/>
    <id>http://www.gaozhy.cn/2018/01/07/致橡树/</id>
    <published>2018-01-07T01:54:55.000Z</published>
    <updated>2018-01-07T02:40:59.797Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/07/致橡树/28e9fe0cddeeb252cd408010af8d40f5.jpeg" title="诗和远方"><blockquote><p>最甜美的是爱情，最苦涩的也是爱情。</p><footer><strong>—— 菲·贝利</strong></footer></blockquote><p>我如果爱你——<br>绝不像攀援①的凌霄花，<br>借你的高枝炫耀自己；</p><p>我如果爱你——<br>绝不学痴情的鸟儿，<br>为绿荫重复单调的歌曲；<br>也不止像泉源，<br>常年送来清凉的慰藉②；<br>也不止像险峰，<br><a id="more"></a><br>增加你的高度，衬托你的威仪。<br>甚至日光，<br>甚至春雨。</p><p>不，这些都还不够！<br>我必须是你近旁的一株木棉，<br>作为树的形象和你站在一起。<br>根，紧握在地下；<br>叶，相触在云里。<br>每一阵风过，<br>我们都互相致意，<br>但没有人，<br>听懂我们的言语。<br>你有你的铜枝铁干，<br>像刀，像剑，也像戟；<br>我有我红硕的花朵，<br>像沉重的叹息，<br>又像英勇的火炬。<br>我们分担寒潮、风雷、霹雳；<br>我们共享雾霭③、流岚⑤、虹霓④。<br>仿佛永远分离，<br>却又终身相依。<br>这才是伟大的爱情，<br>坚贞就在这里：</p><p>爱——<br>不仅爱你伟岸的身躯，<br>也爱你坚持的位置，<br>足下的土地。</p><blockquote><p>①攀援：同“攀缘”比喻投靠有权有势的人往上爬。[1]<br>②慰藉：安慰。[2]<br>③雾霭：雾气。[3]<br>④虹霓：同“虹蜺 ”指彩虹<br>⑤流岚：这里指云雾。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/07/致橡树/28e9fe0cddeeb252cd408010af8d40f5.jpeg&quot; title=&quot;诗和远方&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;最甜美的是爱情，最苦涩的也是爱情。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;—— 菲·贝利&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;我如果爱你——&lt;br&gt;绝不像攀援①的凌霄花，&lt;br&gt;借你的高枝炫耀自己；&lt;/p&gt;
&lt;p&gt;我如果爱你——&lt;br&gt;绝不学痴情的鸟儿，&lt;br&gt;为绿荫重复单调的歌曲；&lt;br&gt;也不止像泉源，&lt;br&gt;常年送来清凉的慰藉②；&lt;br&gt;也不止像险峰，&lt;br&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://www.gaozhy.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="诗和远方" scheme="http://www.gaozhy.cn/tags/%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9/"/>
    
  </entry>
  
</feed>
